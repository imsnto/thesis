{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8926684,"sourceType":"datasetVersion","datasetId":5369525},{"sourceId":9241449,"sourceType":"datasetVersion","datasetId":5590211},{"sourceId":9270609,"sourceType":"datasetVersion","datasetId":5610201},{"sourceId":9780595,"sourceType":"datasetVersion","datasetId":5991892},{"sourceId":103229,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":86533,"modelId":110762},{"sourceId":103478,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":86737,"modelId":110986}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport shutil\nimport random\nimport warnings\nimport numpy as np \nimport pandas as pd \nfrom distutils.dir_util import copy_tree, remove_tree\n\nimport cv2\nfrom PIL import Image # Image.fromarray(img)\nimport nibabel as nib # nib.load(path).get_fdata() \nfrom skimage.measure import shannon_entropy\nfrom scipy.ndimage import gaussian_filter\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport keras\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom tensorflow.keras.layers import Input,Average, Dense, Conv2D, MaxPooling2D, Flatten, BatchNormalization, Dropout,GlobalAveragePooling2D\nfrom tensorflow.keras import layers \nfrom tensorflow.keras.applications import VGG16, ResNet50, Xception, MobileNetV2, VGG19\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\nfrom sklearn.preprocessing import OneHotEncoder \n\n# balance dataset\nfrom imblearn.over_sampling import SMOTE\n\n# data split\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit\n\nplt.style.use('dark_background') # ggplot\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_rows', 10)\n\n# pd.set_option('display.max_columns', 5) \n# pd.set_option('display.max_colwidth', 50) \n# pd.reset_option('display.max_rows')\n# pd.reset_option('display.max_columns')\n# pd.reset_option('display.max_colwidth')\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-28T13:22:21.057049Z","iopub.execute_input":"2024-11-28T13:22:21.057395Z","iopub.status.idle":"2024-11-28T13:22:44.403092Z","shell.execute_reply.started":"2024-11-28T13:22:21.057368Z","shell.execute_reply":"2024-11-28T13:22:44.402406Z"},"trusted":true},"outputs":[{"name":"stderr","text":"2024-11-28 13:22:28.818422: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-11-28 13:22:28.818553: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-11-28 13:22:29.118638: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"DIR_INPUT = r'/kaggle/input/adni-2yr-3t'\nFOLDERS   = os.listdir(DIR_INPUT)\nCLASSES   = os.listdir(os.path.join(DIR_INPUT, FOLDERS[0]))\n\nCLASSES.remove('MCI')\nprint(f'Folders - {FOLDERS}\\nClasses - {CLASSES}')","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:44.404563Z","iopub.execute_input":"2024-11-28T13:22:44.405146Z","iopub.status.idle":"2024-11-28T13:22:44.421614Z","shell.execute_reply.started":"2024-11-28T13:22:44.405121Z","shell.execute_reply":"2024-11-28T13:22:44.420861Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Folders - ['val', 'test', 'train']\nClasses - ['AD', 'CN']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"total = 0\n\ndef count_files(folder, axes, pos):\n    cnt = {}\n    global total\n    for class_name in CLASSES:\n        nums_files = len(os.listdir(os.path.join(DIR_INPUT, folder, class_name)))\n        cnt[class_name] = nums_files\n        total += nums_files\n    cnt = pd.DataFrame({\n        'class': cnt.keys(),\n        'count': cnt.values()\n    })\n    sns.barplot(x='class', y='count', data=cnt, ax=axes[pos], palette='Blues_d')\n    axes[pos].set_title(folder.capitalize() +' Dataset')\n    axes[pos].set_xticklabels(axes[pos].get_xticklabels(), rotation=45, ha='right')\n\nfig, axes = plt.subplots(1, 3, figsize=(12, 3))\ncount_files('train', axes, 0)\ncount_files('test', axes, 1)\ncount_files('val', axes, 2)\nprint(total)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:44.422502Z","iopub.execute_input":"2024-11-28T13:22:44.422748Z","iopub.status.idle":"2024-11-28T13:22:45.063196Z","shell.execute_reply.started":"2024-11-28T13:22:44.422729Z","shell.execute_reply":"2024-11-28T13:22:45.062346Z"},"trusted":true},"outputs":[{"name":"stdout","text":"816\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x300 with 3 Axes>","image/png":""},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"work_root = './adni-2yr-3t'\nif os.path.exists(work_root):\n    remove_tree(work_root)\nos.makedirs(work_root)\n\nwork_train = os.path.join(work_root, 'train')\nwork_test  = os.path.join(work_root, 'test')\nwork_val   = os.path.join(work_root, 'val')\n\nos.makedirs(work_train)\nos.makedirs(work_test)\nos.makedirs(work_val)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:45.065004Z","iopub.execute_input":"2024-11-28T13:22:45.065259Z","iopub.status.idle":"2024-11-28T13:22:45.070863Z","shell.execute_reply.started":"2024-11-28T13:22:45.065237Z","shell.execute_reply":"2024-11-28T13:22:45.069903Z"},"trusted":true},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import sys\nfrom distutils.dir_util import copy_tree\n\n# Suppress output\noriginal_stdout = sys.stdout\nsys.stdout = open(os.devnull, 'w')\n\n# Perform the copy operation\ncopy_tree('/kaggle/input/adni-2yr-3t/test', work_test)\ncopy_tree('/kaggle/input/adni-2yr-3t/val', work_val)\ncopy_tree('/kaggle/input/adni-2yr-3t/train', work_train)\n\n# Restore output\nsys.stdout.close()\nsys.stdout = original_stdout","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:45.071865Z","iopub.execute_input":"2024-11-28T13:22:45.072109Z","iopub.status.idle":"2024-11-28T13:22:59.082926Z","shell.execute_reply.started":"2024-11-28T13:22:45.072089Z","shell.execute_reply":"2024-11-28T13:22:59.081979Z"},"trusted":true},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# copy_tree('/kaggle/input/adni-data/test', work_test)\n# copy_tree('/kaggle/input/adni-data/val', work_val)\n# copy_tree('/kaggle/input/adni-data/train', work_train)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:59.084147Z","iopub.execute_input":"2024-11-28T13:22:59.084436Z","iopub.status.idle":"2024-11-28T13:22:59.088212Z","shell.execute_reply.started":"2024-11-28T13:22:59.084413Z","shell.execute_reply":"2024-11-28T13:22:59.087418Z"},"trusted":true},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# remove_tree('/kaggle/working/dataset')","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:59.089156Z","iopub.execute_input":"2024-11-28T13:22:59.089396Z","iopub.status.idle":"2024-11-28T13:22:59.101916Z","shell.execute_reply.started":"2024-11-28T13:22:59.089377Z","shell.execute_reply":"2024-11-28T13:22:59.101262Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"code","source":"remove_tree('/kaggle/working/adni-2yr-3t/test/MCI')\nremove_tree('/kaggle/working/adni-2yr-3t/train/MCI')\nremove_tree('/kaggle/working/adni-2yr-3t/val/MCI')","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:59.102829Z","iopub.execute_input":"2024-11-28T13:22:59.103058Z","iopub.status.idle":"2024-11-28T13:22:59.133740Z","shell.execute_reply.started":"2024-11-28T13:22:59.103039Z","shell.execute_reply":"2024-11-28T13:22:59.132961Z"},"trusted":true},"outputs":[],"execution_count":8},{"cell_type":"code","source":"data_gen_args = {\n    'rescale': 1./255,  \n    'shear_range': 0.2, \n    'zoom_range': 0.2,  \n    'horizontal_flip': True,  \n    'vertical_flip': False,  \n    'rotation_range': 20,  \n    'width_shift_range': 0.2,  \n    'height_shift_range': 0.2, \n    'fill_mode' : 'nearest'\n}\n\naug_data_gen = ImageDataGenerator(**data_gen_args)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:59.134556Z","iopub.execute_input":"2024-11-28T13:22:59.134765Z","iopub.status.idle":"2024-11-28T13:22:59.138833Z","shell.execute_reply.started":"2024-11-28T13:22:59.134747Z","shell.execute_reply":"2024-11-28T13:22:59.138114Z"},"trusted":true},"outputs":[],"execution_count":9},{"cell_type":"code","source":"\ndef aug(src, dest, factor, total):\n    print(len(os.listdir(src)))\n    curr = len(os.listdir(src))\n    \n    for img_file in os.listdir(src):\n        img_path = os.path.join(src, img_file)\n        img = cv2.imread(img_path)\n        img = cv2.resize(img, (224, 224))\n        img = np.expand_dims(img, axis=0)\n        for i, new_img in enumerate(aug_data_gen.flow(img, batch_size=1)):\n            if curr == total:\n                return\n            curr += 1\n            new_img = new_img[0] \n            new_file_name = os.path.join(dest, os.path.splitext(img_file)[0] + '_' + str(i) + '.jpg')\n            plt.imsave(new_file_name, new_img)\n            if i == factor:\n                break\n\naug('/kaggle/input/adni-2yr-3t/train/AD', '/kaggle/working/adni-2yr-3t/train/AD', 10, 2000)\naug('/kaggle/input/adni-2yr-3t/train/CN', '/kaggle/working/adni-2yr-3t/train/CN', 6, 2000)\n\naug('/kaggle/input/adni-2yr-3t/val/AD', '/kaggle/working/adni-2yr-3t/val/AD', 6, 500)\naug('/kaggle/input/adni-2yr-3t/val/CN', '/kaggle/working/adni-2yr-3t/val/CN', 10, 500)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:22:59.142240Z","iopub.execute_input":"2024-11-28T13:22:59.143020Z","iopub.status.idle":"2024-11-28T13:23:45.882329Z","shell.execute_reply.started":"2024-11-28T13:22:59.142992Z","shell.execute_reply":"2024-11-28T13:23:45.881632Z"},"trusted":true},"outputs":[{"name":"stdout","text":"216\n365\n70\n43\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"BATCH_SIZE = 32","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:23:45.883447Z","iopub.execute_input":"2024-11-28T13:23:45.883780Z","iopub.status.idle":"2024-11-28T13:23:45.887952Z","shell.execute_reply.started":"2024-11-28T13:23:45.883749Z","shell.execute_reply":"2024-11-28T13:23:45.886970Z"},"trusted":true},"outputs":[],"execution_count":11},{"cell_type":"code","source":"val_gen = ImageDataGenerator(rescale=1./255)\ntest_gen = ImageDataGenerator(rescale=1./255)\ntrain_gen = ImageDataGenerator(**data_gen_args)\n\ntrain_dataset = train_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'train'),\n    class_mode = 'binary',\n    target_size = (150, 150),\n    batch_size = BATCH_SIZE\n)\ntest_dataset = test_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'test'),\n    class_mode = 'binary',\n    target_size = (150, 150),\n    batch_size = BATCH_SIZE,\n    shuffle=False\n)\nval_dataset = val_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'val'),\n    class_mode = 'binary',\n    target_size = (150, 150),\n    batch_size = BATCH_SIZE,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:23:45.889208Z","iopub.execute_input":"2024-11-28T13:23:45.889538Z","iopub.status.idle":"2024-11-28T13:23:46.063030Z","shell.execute_reply.started":"2024-11-28T13:23:45.889510Z","shell.execute_reply":"2024-11-28T13:23:46.062445Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Found 4000 images belonging to 2 classes.\nFound 122 images belonging to 2 classes.\nFound 1000 images belonging to 2 classes.\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"print(val_dataset.class_indices)\nprint(test_dataset.class_indices)\nprint(train_dataset.class_indices)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:23:46.063955Z","iopub.execute_input":"2024-11-28T13:23:46.064204Z","iopub.status.idle":"2024-11-28T13:23:46.068371Z","shell.execute_reply.started":"2024-11-28T13:23:46.064184Z","shell.execute_reply":"2024-11-28T13:23:46.067594Z"},"trusted":true},"outputs":[{"name":"stdout","text":"{'AD': 0, 'CN': 1}\n{'AD': 0, 'CN': 1}\n{'AD': 0, 'CN': 1}\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"test_dataset = test_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'test'),\n    class_mode = 'binary',\n    target_size = (150, 150),\n    batch_size = BATCH_SIZE,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-28T13:23:46.069215Z","iopub.execute_input":"2024-11-28T13:23:46.069450Z","iopub.status.idle":"2024-11-28T13:23:46.089134Z","shell.execute_reply.started":"2024-11-28T13:23:46.069431Z","shell.execute_reply":"2024-11-28T13:23:46.088470Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Found 122 images belonging to 2 classes.\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Initialize the ReduceLROnPlateau callback\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss',  \n    factor=0.5,  \n    patience=10,  \n    verbose=1,  \n    min_lr=1e-10 \n)\n\n# Initialize the ModelCheckpoint callback\ncheckpoint = ModelCheckpoint(\n    'best_vgg16_model.keras',  \n    monitor='val_loss',  \n    save_best_only=True,  \n    mode='min',  \n    verbose=1  \n)\n\n# Initialize the EarlyStopping callback\nearly_stopping = EarlyStopping(\n    monitor='val_loss',  \n    patience=30, \n    restore_best_weights=True,  \n    verbose=1  \n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:23:46.089940Z","iopub.execute_input":"2024-11-28T13:23:46.090147Z","iopub.status.idle":"2024-11-28T13:23:46.094827Z","shell.execute_reply.started":"2024-11-28T13:23:46.090128Z","shell.execute_reply":"2024-11-28T13:23:46.094056Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"base_model = VGG16(weights='imagenet', include_top=False, input_shape=(150, 150, 3))\n\nfor layer in base_model.layers:\n    layer.trainable = False\n\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dropout(0.4),\n    Dense(1, activation='sigmoid')  \n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Print model summary\nmodel.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:23:46.095905Z","iopub.execute_input":"2024-11-28T13:23:46.096134Z","iopub.status.idle":"2024-11-28T13:23:47.887727Z","shell.execute_reply.started":"2024-11-28T13:23:46.096114Z","shell.execute_reply":"2024-11-28T13:23:47.887008Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ ?                      │    \u001b[38;5;34m14,714,688\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ ?                      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:50:02.392525Z","iopub.execute_input":"2024-11-28T13:50:02.392886Z","iopub.status.idle":"2024-11-28T13:50:02.411928Z","shell.execute_reply.started":"2024-11-28T13:50:02.392858Z","shell.execute_reply":"2024-11-28T13:50:02.411240Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │    \u001b[38;5;34m14,714,688\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8192\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │     \u001b[38;5;34m4,194,816\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m513\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8192</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │     <span style=\"color: #00af00; text-decoration-color: #00af00\">4,194,816</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">513</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m27,300,677\u001b[0m (104.14 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">27,300,677</span> (104.14 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,195,329\u001b[0m (16.00 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,195,329</span> (16.00 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m8,390,660\u001b[0m (32.01 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,390,660</span> (32.01 MB)\n</pre>\n"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"BATCH_SIZE = 32 \n\n# Train the model\nhistory = model.fit(\n    train_dataset,\n    epochs=1000,  \n    validation_data=val_dataset,\n    batch_size=BATCH_SIZE,\n    callbacks=[reduce_lr, checkpoint, early_stopping],\n    verbose=2\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:23:47.888683Z","iopub.execute_input":"2024-11-28T13:23:47.888941Z","iopub.status.idle":"2024-11-28T13:37:52.463363Z","shell.execute_reply.started":"2024-11-28T13:23:47.888919Z","shell.execute_reply":"2024-11-28T13:37:52.462646Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/1000\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1732800249.233672     133 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1732800249.249959     133 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\nW0000 00:00:1732800269.408681     133 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1: val_loss improved from inf to 0.63817, saving model to best_vgg16_model.keras\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732800276.553409     136 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"125/125 - 49s - 392ms/step - accuracy: 0.6635 - loss: 0.6952 - val_accuracy: 0.5640 - val_loss: 0.6382 - learning_rate: 0.0010\nEpoch 2/1000\n\nEpoch 2: val_loss improved from 0.63817 to 0.58108, saving model to best_vgg16_model.keras\n125/125 - 23s - 185ms/step - accuracy: 0.7352 - loss: 0.5224 - val_accuracy: 0.7120 - val_loss: 0.5811 - learning_rate: 0.0010\nEpoch 3/1000\n\nEpoch 3: val_loss did not improve from 0.58108\n125/125 - 22s - 179ms/step - accuracy: 0.7638 - loss: 0.4796 - val_accuracy: 0.6770 - val_loss: 0.5850 - learning_rate: 0.0010\nEpoch 4/1000\n\nEpoch 4: val_loss improved from 0.58108 to 0.56392, saving model to best_vgg16_model.keras\n125/125 - 23s - 186ms/step - accuracy: 0.7747 - loss: 0.4596 - val_accuracy: 0.6870 - val_loss: 0.5639 - learning_rate: 0.0010\nEpoch 5/1000\n\nEpoch 5: val_loss did not improve from 0.56392\n125/125 - 23s - 182ms/step - accuracy: 0.7960 - loss: 0.4225 - val_accuracy: 0.7440 - val_loss: 0.6020 - learning_rate: 0.0010\nEpoch 6/1000\n\nEpoch 6: val_loss improved from 0.56392 to 0.54982, saving model to best_vgg16_model.keras\n125/125 - 23s - 185ms/step - accuracy: 0.7937 - loss: 0.4156 - val_accuracy: 0.7160 - val_loss: 0.5498 - learning_rate: 0.0010\nEpoch 7/1000\n\nEpoch 7: val_loss did not improve from 0.54982\n125/125 - 22s - 180ms/step - accuracy: 0.8095 - loss: 0.3957 - val_accuracy: 0.7320 - val_loss: 0.6351 - learning_rate: 0.0010\nEpoch 8/1000\n\nEpoch 8: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8192 - loss: 0.3894 - val_accuracy: 0.7250 - val_loss: 0.7398 - learning_rate: 0.0010\nEpoch 9/1000\n\nEpoch 9: val_loss did not improve from 0.54982\n125/125 - 22s - 179ms/step - accuracy: 0.8177 - loss: 0.3749 - val_accuracy: 0.7350 - val_loss: 0.5504 - learning_rate: 0.0010\nEpoch 10/1000\n\nEpoch 10: val_loss did not improve from 0.54982\n125/125 - 23s - 180ms/step - accuracy: 0.8270 - loss: 0.3669 - val_accuracy: 0.7300 - val_loss: 0.5603 - learning_rate: 0.0010\nEpoch 11/1000\n\nEpoch 11: val_loss did not improve from 0.54982\n125/125 - 22s - 180ms/step - accuracy: 0.8307 - loss: 0.3581 - val_accuracy: 0.7380 - val_loss: 0.5611 - learning_rate: 0.0010\nEpoch 12/1000\n\nEpoch 12: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8385 - loss: 0.3620 - val_accuracy: 0.7150 - val_loss: 0.5694 - learning_rate: 0.0010\nEpoch 13/1000\n\nEpoch 13: val_loss did not improve from 0.54982\n125/125 - 23s - 180ms/step - accuracy: 0.8480 - loss: 0.3384 - val_accuracy: 0.7280 - val_loss: 0.5928 - learning_rate: 0.0010\nEpoch 14/1000\n\nEpoch 14: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.8522 - loss: 0.3294 - val_accuracy: 0.7840 - val_loss: 0.6308 - learning_rate: 0.0010\nEpoch 15/1000\n\nEpoch 15: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.8395 - loss: 0.3429 - val_accuracy: 0.7750 - val_loss: 0.5581 - learning_rate: 0.0010\nEpoch 16/1000\n\nEpoch 16: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n\nEpoch 16: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8508 - loss: 0.3226 - val_accuracy: 0.7820 - val_loss: 0.6294 - learning_rate: 0.0010\nEpoch 17/1000\n\nEpoch 17: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8635 - loss: 0.2943 - val_accuracy: 0.7730 - val_loss: 0.6219 - learning_rate: 5.0000e-04\nEpoch 18/1000\n\nEpoch 18: val_loss did not improve from 0.54982\n125/125 - 23s - 183ms/step - accuracy: 0.8777 - loss: 0.2791 - val_accuracy: 0.7890 - val_loss: 0.6803 - learning_rate: 5.0000e-04\nEpoch 19/1000\n\nEpoch 19: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.8783 - loss: 0.2795 - val_accuracy: 0.7800 - val_loss: 0.6465 - learning_rate: 5.0000e-04\nEpoch 20/1000\n\nEpoch 20: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.8813 - loss: 0.2690 - val_accuracy: 0.7820 - val_loss: 0.6208 - learning_rate: 5.0000e-04\nEpoch 21/1000\n\nEpoch 21: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8860 - loss: 0.2605 - val_accuracy: 0.7730 - val_loss: 0.6700 - learning_rate: 5.0000e-04\nEpoch 22/1000\n\nEpoch 22: val_loss did not improve from 0.54982\n125/125 - 23s - 183ms/step - accuracy: 0.8785 - loss: 0.2729 - val_accuracy: 0.7530 - val_loss: 0.6713 - learning_rate: 5.0000e-04\nEpoch 23/1000\n\nEpoch 23: val_loss did not improve from 0.54982\n125/125 - 23s - 183ms/step - accuracy: 0.8840 - loss: 0.2552 - val_accuracy: 0.7740 - val_loss: 0.7212 - learning_rate: 5.0000e-04\nEpoch 24/1000\n\nEpoch 24: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.8930 - loss: 0.2569 - val_accuracy: 0.7920 - val_loss: 0.6825 - learning_rate: 5.0000e-04\nEpoch 25/1000\n\nEpoch 25: val_loss did not improve from 0.54982\n125/125 - 23s - 184ms/step - accuracy: 0.8955 - loss: 0.2535 - val_accuracy: 0.7970 - val_loss: 0.6849 - learning_rate: 5.0000e-04\nEpoch 26/1000\n\nEpoch 26: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n\nEpoch 26: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8903 - loss: 0.2553 - val_accuracy: 0.7730 - val_loss: 0.6923 - learning_rate: 5.0000e-04\nEpoch 27/1000\n\nEpoch 27: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.9030 - loss: 0.2334 - val_accuracy: 0.7750 - val_loss: 0.6928 - learning_rate: 2.5000e-04\nEpoch 28/1000\n\nEpoch 28: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.8992 - loss: 0.2335 - val_accuracy: 0.7850 - val_loss: 0.7343 - learning_rate: 2.5000e-04\nEpoch 29/1000\n\nEpoch 29: val_loss did not improve from 0.54982\n125/125 - 23s - 180ms/step - accuracy: 0.9010 - loss: 0.2316 - val_accuracy: 0.7840 - val_loss: 0.7125 - learning_rate: 2.5000e-04\nEpoch 30/1000\n\nEpoch 30: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.9025 - loss: 0.2271 - val_accuracy: 0.7770 - val_loss: 0.6904 - learning_rate: 2.5000e-04\nEpoch 31/1000\n\nEpoch 31: val_loss did not improve from 0.54982\n125/125 - 22s - 180ms/step - accuracy: 0.9100 - loss: 0.2178 - val_accuracy: 0.7840 - val_loss: 0.7278 - learning_rate: 2.5000e-04\nEpoch 32/1000\n\nEpoch 32: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.9045 - loss: 0.2234 - val_accuracy: 0.7820 - val_loss: 0.7379 - learning_rate: 2.5000e-04\nEpoch 33/1000\n\nEpoch 33: val_loss did not improve from 0.54982\n125/125 - 23s - 186ms/step - accuracy: 0.9095 - loss: 0.2188 - val_accuracy: 0.7810 - val_loss: 0.7241 - learning_rate: 2.5000e-04\nEpoch 34/1000\n\nEpoch 34: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.9093 - loss: 0.2194 - val_accuracy: 0.7920 - val_loss: 0.7703 - learning_rate: 2.5000e-04\nEpoch 35/1000\n\nEpoch 35: val_loss did not improve from 0.54982\n125/125 - 23s - 181ms/step - accuracy: 0.9178 - loss: 0.2149 - val_accuracy: 0.7780 - val_loss: 0.7739 - learning_rate: 2.5000e-04\nEpoch 36/1000\n\nEpoch 36: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n\nEpoch 36: val_loss did not improve from 0.54982\n125/125 - 23s - 182ms/step - accuracy: 0.9135 - loss: 0.2104 - val_accuracy: 0.8000 - val_loss: 0.7504 - learning_rate: 2.5000e-04\nEpoch 36: early stopping\nRestoring model weights from the end of the best epoch: 6.\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# Evaluate the model on the test dataset\ntest_loss, test_acc = model.evaluate(test_dataset, verbose=2)\n\nprint(f\"Test Loss: {test_loss}\")\nprint(f\"Test Accuracy: {test_acc}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:41:36.386857Z","iopub.execute_input":"2024-11-28T13:41:36.387714Z","iopub.status.idle":"2024-11-28T13:41:36.797766Z","shell.execute_reply.started":"2024-11-28T13:41:36.387672Z","shell.execute_reply":"2024-11-28T13:41:36.796936Z"}},"outputs":[{"name":"stdout","text":"4/4 - 0s - 86ms/step - accuracy: 0.6967 - loss: 0.6171\nTest Loss: 0.6171166896820068\nTest Accuracy: 0.6967213153839111\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"model.evaluate(train_dataset, return_dict=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:54:03.992532Z","iopub.execute_input":"2024-11-28T13:54:03.993140Z","iopub.status.idle":"2024-11-28T13:54:24.565459Z","shell.execute_reply.started":"2024-11-28T13:54:03.993113Z","shell.execute_reply":"2024-11-28T13:54:24.564664Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 161ms/step - accuracy: 0.8446 - loss: 0.3484\n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 0.8367499709129333, 'loss': 0.35633111000061035}"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"model.evaluate(val_dataset, verbose=2)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:53:28.707822Z","iopub.execute_input":"2024-11-28T13:53:28.708627Z","iopub.status.idle":"2024-11-28T13:53:30.819869Z","shell.execute_reply.started":"2024-11-28T13:53:28.708597Z","shell.execute_reply":"2024-11-28T13:53:30.819125Z"}},"outputs":[{"name":"stdout","text":"32/32 - 2s - 64ms/step - accuracy: 0.7160 - loss: 0.5498\n","output_type":"stream"},{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"[0.5498221516609192, 0.7160000205039978]"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"import numpy as np\n\n# Get model predictions (probabilities) on the test dataset\npredictions = model.predict(test_dataset)\n\n# Convert probabilities to class labels (0 or 1)\npredicted_classes = (predictions > 0.5).astype(\"int32\")  # Threshold at 0.5 for binary classification\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:41:52.922837Z","iopub.execute_input":"2024-11-28T13:41:52.923207Z","iopub.status.idle":"2024-11-28T13:41:54.450873Z","shell.execute_reply.started":"2024-11-28T13:41:52.923178Z","shell.execute_reply":"2024-11-28T13:41:54.450144Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 240ms/step\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Get true labels from the test dataset\ntrue_classes = test_dataset.classes  # The true class labels for the test set\n\n# Compute the confusion matrix\ncm = confusion_matrix(true_classes, predicted_classes)\n\n# Plot the confusion matrix\nplt.figure(figsize=(6, 5))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['AD', 'CN'], yticklabels=['AD', 'CN'])\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n\nplt.savefig('confusion_matrix(vgg16).png')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:47:01.374127Z","iopub.execute_input":"2024-11-28T13:47:01.374500Z","iopub.status.idle":"2024-11-28T13:47:01.634246Z","shell.execute_reply.started":"2024-11-28T13:47:01.374471Z","shell.execute_reply":"2024-11-28T13:47:01.633512Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 0 Axes>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Compute accuracy, precision, recall, and F1-score\naccuracy = accuracy_score(true_classes, predicted_classes)\nprecision = precision_score(true_classes, predicted_classes)\nrecall = recall_score(true_classes, predicted_classes)\nf1 = f1_score(true_classes, predicted_classes)\n\nprint(f\"Accuracy: {accuracy:.4f}\")\nprint(f\"Precision: {precision:.4f}\")\nprint(f\"Recall: {recall:.4f}\")\nprint(f\"F1-score: {f1:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:42:45.887715Z","iopub.execute_input":"2024-11-28T13:42:45.888060Z","iopub.status.idle":"2024-11-28T13:42:45.909137Z","shell.execute_reply.started":"2024-11-28T13:42:45.888032Z","shell.execute_reply":"2024-11-28T13:42:45.908270Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.6967\nPrecision: 0.7400\nRecall: 0.6066\nF1-score: 0.6667\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot Accuracy\nplt.figure(figsize=(12, 6))\n\n# Training accuracy\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.title('Model Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\n# Plot Loss\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Model Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\n# Show the plots\nplt.tight_layout()\nplt.show()\n\nplt.savefig('model accuracy and loss (vgg16).png')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:47:53.812679Z","iopub.execute_input":"2024-11-28T13:47:53.813328Z","iopub.status.idle":"2024-11-28T13:47:54.408344Z","shell.execute_reply.started":"2024-11-28T13:47:53.813281Z","shell.execute_reply":"2024-11-28T13:47:54.407526Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 2 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 0 Axes>"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Unfreeze the last 4 layers of the VGG16 base model\nfor layer in base_model.layers[-4:]:\n    layer.trainable = True\n\n\n\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(512, activation='relu', kernel_regularizer=l2(0.01)),  \n    Dropout(0.5),\n    Dense(1, activation='sigmoid')  \n])\nmodel.compile(optimizer=Adam(learning_rate=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:59:33.482179Z","iopub.execute_input":"2024-11-28T13:59:33.482825Z","iopub.status.idle":"2024-11-28T13:59:33.497203Z","shell.execute_reply.started":"2024-11-28T13:59:33.482798Z","shell.execute_reply":"2024-11-28T13:59:33.496460Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize the ReduceLROnPlateau callback\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss',  \n    factor=0.5,  \n    patience=10,  \n    verbose=1,  \n    min_lr=1e-10 \n)\n\n# Initialize the ModelCheckpoint callback\ncheckpoint = ModelCheckpoint(\n    'best_vgg16_model.keras',  \n    monitor='val_loss',  \n    save_best_only=True,  \n    mode='min',  \n    verbose=1  \n)\n\n# Initialize the EarlyStopping callback\nearly_stopping = EarlyStopping(\n    monitor='val_loss',  \n    patience=30, \n    restore_best_weights=True,  \n    verbose=1  \n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T14:13:08.890651Z","iopub.execute_input":"2024-11-28T14:13:08.891006Z","iopub.status.idle":"2024-11-28T14:13:08.896238Z","shell.execute_reply.started":"2024-11-28T14:13:08.890978Z","shell.execute_reply":"2024-11-28T14:13:08.895275Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"BATCH_SIZE = 32 \n\n# Train the model\nhistory = model.fit(\n    train_dataset,\n    epochs=1000,  \n    validation_data=val_dataset,\n    batch_size=BATCH_SIZE,\n    callbacks=[reduce_lr, checkpoint, early_stopping],\n    verbose=2\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T14:13:10.464443Z","iopub.execute_input":"2024-11-28T14:13:10.464774Z","iopub.status.idle":"2024-11-28T14:37:11.314359Z","shell.execute_reply.started":"2024-11-28T14:13:10.464748Z","shell.execute_reply":"2024-11-28T14:37:11.313615Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/1000\n\nEpoch 1: val_loss improved from inf to 5.71535, saving model to best_vgg16_model.keras\n125/125 - 24s - 191ms/step - accuracy: 0.8773 - loss: 5.6318 - val_accuracy: 0.7990 - val_loss: 5.7154 - learning_rate: 1.0000e-05\nEpoch 2/1000\n\nEpoch 2: val_loss improved from 5.71535 to 5.17037, saving model to best_vgg16_model.keras\n125/125 - 24s - 195ms/step - accuracy: 0.9025 - loss: 4.9720 - val_accuracy: 0.8160 - val_loss: 5.1704 - learning_rate: 1.0000e-05\nEpoch 3/1000\n\nEpoch 3: val_loss improved from 5.17037 to 4.74995, saving model to best_vgg16_model.keras\n125/125 - 24s - 188ms/step - accuracy: 0.9220 - loss: 4.4500 - val_accuracy: 0.7360 - val_loss: 4.7500 - learning_rate: 1.0000e-05\nEpoch 4/1000\n\nEpoch 4: val_loss improved from 4.74995 to 4.45050, saving model to best_vgg16_model.keras\n125/125 - 24s - 188ms/step - accuracy: 0.9298 - loss: 4.0229 - val_accuracy: 0.7880 - val_loss: 4.4505 - learning_rate: 1.0000e-05\nEpoch 5/1000\n\nEpoch 5: val_loss improved from 4.45050 to 4.18613, saving model to best_vgg16_model.keras\n125/125 - 24s - 191ms/step - accuracy: 0.9370 - loss: 3.6519 - val_accuracy: 0.7350 - val_loss: 4.1861 - learning_rate: 1.0000e-05\nEpoch 6/1000\n\nEpoch 6: val_loss improved from 4.18613 to 4.01132, saving model to best_vgg16_model.keras\n125/125 - 24s - 190ms/step - accuracy: 0.9475 - loss: 3.3340 - val_accuracy: 0.7330 - val_loss: 4.0113 - learning_rate: 1.0000e-05\nEpoch 7/1000\n\nEpoch 7: val_loss improved from 4.01132 to 3.77985, saving model to best_vgg16_model.keras\n125/125 - 23s - 188ms/step - accuracy: 0.9455 - loss: 3.0705 - val_accuracy: 0.7760 - val_loss: 3.7798 - learning_rate: 1.0000e-05\nEpoch 8/1000\n\nEpoch 8: val_loss improved from 3.77985 to 3.69779, saving model to best_vgg16_model.keras\n125/125 - 23s - 187ms/step - accuracy: 0.9588 - loss: 2.8241 - val_accuracy: 0.7500 - val_loss: 3.6978 - learning_rate: 1.0000e-05\nEpoch 9/1000\n\nEpoch 9: val_loss improved from 3.69779 to 3.53936, saving model to best_vgg16_model.keras\n125/125 - 23s - 188ms/step - accuracy: 0.9688 - loss: 2.6078 - val_accuracy: 0.7650 - val_loss: 3.5394 - learning_rate: 1.0000e-05\nEpoch 10/1000\n\nEpoch 10: val_loss improved from 3.53936 to 3.46731, saving model to best_vgg16_model.keras\n125/125 - 24s - 190ms/step - accuracy: 0.9660 - loss: 2.4246 - val_accuracy: 0.6640 - val_loss: 3.4673 - learning_rate: 1.0000e-05\nEpoch 11/1000\n\nEpoch 11: val_loss improved from 3.46731 to 3.31622, saving model to best_vgg16_model.keras\n125/125 - 23s - 187ms/step - accuracy: 0.9685 - loss: 2.2595 - val_accuracy: 0.7040 - val_loss: 3.3162 - learning_rate: 1.0000e-05\nEpoch 12/1000\n\nEpoch 12: val_loss improved from 3.31622 to 3.21913, saving model to best_vgg16_model.keras\n125/125 - 23s - 188ms/step - accuracy: 0.9732 - loss: 2.1089 - val_accuracy: 0.7370 - val_loss: 3.2191 - learning_rate: 1.0000e-05\nEpoch 13/1000\n\nEpoch 13: val_loss improved from 3.21913 to 3.17894, saving model to best_vgg16_model.keras\n125/125 - 24s - 190ms/step - accuracy: 0.9755 - loss: 1.9704 - val_accuracy: 0.7350 - val_loss: 3.1789 - learning_rate: 1.0000e-05\nEpoch 14/1000\n\nEpoch 14: val_loss improved from 3.17894 to 3.12403, saving model to best_vgg16_model.keras\n125/125 - 23s - 187ms/step - accuracy: 0.9710 - loss: 1.8527 - val_accuracy: 0.6990 - val_loss: 3.1240 - learning_rate: 1.0000e-05\nEpoch 15/1000\n\nEpoch 15: val_loss improved from 3.12403 to 2.95971, saving model to best_vgg16_model.keras\n125/125 - 23s - 187ms/step - accuracy: 0.9793 - loss: 1.7367 - val_accuracy: 0.7180 - val_loss: 2.9597 - learning_rate: 1.0000e-05\nEpoch 16/1000\n\nEpoch 16: val_loss improved from 2.95971 to 2.95253, saving model to best_vgg16_model.keras\n125/125 - 24s - 189ms/step - accuracy: 0.9805 - loss: 1.6369 - val_accuracy: 0.7140 - val_loss: 2.9525 - learning_rate: 1.0000e-05\nEpoch 17/1000\n\nEpoch 17: val_loss improved from 2.95253 to 2.94188, saving model to best_vgg16_model.keras\n125/125 - 24s - 189ms/step - accuracy: 0.9825 - loss: 1.5422 - val_accuracy: 0.7690 - val_loss: 2.9419 - learning_rate: 1.0000e-05\nEpoch 18/1000\n\nEpoch 18: val_loss improved from 2.94188 to 2.85102, saving model to best_vgg16_model.keras\n125/125 - 24s - 188ms/step - accuracy: 0.9795 - loss: 1.4633 - val_accuracy: 0.7980 - val_loss: 2.8510 - learning_rate: 1.0000e-05\nEpoch 19/1000\n\nEpoch 19: val_loss improved from 2.85102 to 2.69974, saving model to best_vgg16_model.keras\n125/125 - 24s - 188ms/step - accuracy: 0.9820 - loss: 1.3802 - val_accuracy: 0.7910 - val_loss: 2.6997 - learning_rate: 1.0000e-05\nEpoch 20/1000\n\nEpoch 20: val_loss did not improve from 2.69974\n125/125 - 23s - 184ms/step - accuracy: 0.9822 - loss: 1.3083 - val_accuracy: 0.6440 - val_loss: 2.7913 - learning_rate: 1.0000e-05\nEpoch 21/1000\n\nEpoch 21: val_loss improved from 2.69974 to 2.64857, saving model to best_vgg16_model.keras\n125/125 - 24s - 188ms/step - accuracy: 0.9845 - loss: 1.2443 - val_accuracy: 0.8150 - val_loss: 2.6486 - learning_rate: 1.0000e-05\nEpoch 22/1000\n\nEpoch 22: val_loss improved from 2.64857 to 2.58487, saving model to best_vgg16_model.keras\n125/125 - 24s - 189ms/step - accuracy: 0.9845 - loss: 1.1793 - val_accuracy: 0.7290 - val_loss: 2.5849 - learning_rate: 1.0000e-05\nEpoch 23/1000\n\nEpoch 23: val_loss improved from 2.58487 to 2.39884, saving model to best_vgg16_model.keras\n125/125 - 23s - 186ms/step - accuracy: 0.9840 - loss: 1.1215 - val_accuracy: 0.7580 - val_loss: 2.3988 - learning_rate: 1.0000e-05\nEpoch 24/1000\n\nEpoch 24: val_loss did not improve from 2.39884\n125/125 - 23s - 185ms/step - accuracy: 0.9880 - loss: 1.0578 - val_accuracy: 0.7980 - val_loss: 2.4794 - learning_rate: 1.0000e-05\nEpoch 25/1000\n\nEpoch 25: val_loss did not improve from 2.39884\n125/125 - 23s - 183ms/step - accuracy: 0.9908 - loss: 1.0013 - val_accuracy: 0.8010 - val_loss: 2.4782 - learning_rate: 1.0000e-05\nEpoch 26/1000\n\nEpoch 26: val_loss did not improve from 2.39884\n125/125 - 23s - 186ms/step - accuracy: 0.9923 - loss: 0.9491 - val_accuracy: 0.7850 - val_loss: 2.5258 - learning_rate: 1.0000e-05\nEpoch 27/1000\n\nEpoch 27: val_loss did not improve from 2.39884\n125/125 - 23s - 183ms/step - accuracy: 0.9885 - loss: 0.9079 - val_accuracy: 0.7240 - val_loss: 2.4910 - learning_rate: 1.0000e-05\nEpoch 28/1000\n\nEpoch 28: val_loss did not improve from 2.39884\n125/125 - 23s - 184ms/step - accuracy: 0.9900 - loss: 0.8596 - val_accuracy: 0.6910 - val_loss: 2.4044 - learning_rate: 1.0000e-05\nEpoch 29/1000\n\nEpoch 29: val_loss improved from 2.39884 to 2.34048, saving model to best_vgg16_model.keras\n125/125 - 24s - 189ms/step - accuracy: 0.9908 - loss: 0.8210 - val_accuracy: 0.7650 - val_loss: 2.3405 - learning_rate: 1.0000e-05\nEpoch 30/1000\n\nEpoch 30: val_loss improved from 2.34048 to 2.29210, saving model to best_vgg16_model.keras\n125/125 - 23s - 187ms/step - accuracy: 0.9908 - loss: 0.7787 - val_accuracy: 0.7330 - val_loss: 2.2921 - learning_rate: 1.0000e-05\nEpoch 31/1000\n\nEpoch 31: val_loss did not improve from 2.29210\n125/125 - 23s - 183ms/step - accuracy: 0.9910 - loss: 0.7420 - val_accuracy: 0.7070 - val_loss: 2.3364 - learning_rate: 1.0000e-05\nEpoch 32/1000\n\nEpoch 32: val_loss improved from 2.29210 to 2.11249, saving model to best_vgg16_model.keras\n125/125 - 24s - 191ms/step - accuracy: 0.9875 - loss: 0.7152 - val_accuracy: 0.7240 - val_loss: 2.1125 - learning_rate: 1.0000e-05\nEpoch 33/1000\n\nEpoch 33: val_loss did not improve from 2.11249\n125/125 - 23s - 187ms/step - accuracy: 0.9937 - loss: 0.6713 - val_accuracy: 0.7650 - val_loss: 2.2368 - learning_rate: 1.0000e-05\nEpoch 34/1000\n\nEpoch 34: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9955 - loss: 0.6331 - val_accuracy: 0.7880 - val_loss: 2.2264 - learning_rate: 1.0000e-05\nEpoch 35/1000\n\nEpoch 35: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9937 - loss: 0.6038 - val_accuracy: 0.7470 - val_loss: 2.2878 - learning_rate: 1.0000e-05\nEpoch 36/1000\n\nEpoch 36: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9920 - loss: 0.5800 - val_accuracy: 0.7230 - val_loss: 2.2042 - learning_rate: 1.0000e-05\nEpoch 37/1000\n\nEpoch 37: val_loss did not improve from 2.11249\n125/125 - 23s - 184ms/step - accuracy: 0.9933 - loss: 0.5505 - val_accuracy: 0.7700 - val_loss: 2.2642 - learning_rate: 1.0000e-05\nEpoch 38/1000\n\nEpoch 38: val_loss did not improve from 2.11249\n125/125 - 23s - 182ms/step - accuracy: 0.9945 - loss: 0.5220 - val_accuracy: 0.6810 - val_loss: 2.4612 - learning_rate: 1.0000e-05\nEpoch 39/1000\n\nEpoch 39: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9937 - loss: 0.4972 - val_accuracy: 0.7240 - val_loss: 2.3016 - learning_rate: 1.0000e-05\nEpoch 40/1000\n\nEpoch 40: val_loss did not improve from 2.11249\n125/125 - 23s - 186ms/step - accuracy: 0.9942 - loss: 0.4721 - val_accuracy: 0.6890 - val_loss: 2.2914 - learning_rate: 1.0000e-05\nEpoch 41/1000\n\nEpoch 41: val_loss did not improve from 2.11249\n125/125 - 23s - 184ms/step - accuracy: 0.9945 - loss: 0.4481 - val_accuracy: 0.7490 - val_loss: 2.2315 - learning_rate: 1.0000e-05\nEpoch 42/1000\n\nEpoch 42: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-06.\n\nEpoch 42: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9945 - loss: 0.4286 - val_accuracy: 0.7490 - val_loss: 2.1848 - learning_rate: 1.0000e-05\nEpoch 43/1000\n\nEpoch 43: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9967 - loss: 0.4080 - val_accuracy: 0.6500 - val_loss: 2.4376 - learning_rate: 5.0000e-06\nEpoch 44/1000\n\nEpoch 44: val_loss did not improve from 2.11249\n125/125 - 23s - 186ms/step - accuracy: 0.9952 - loss: 0.3998 - val_accuracy: 0.7560 - val_loss: 2.1975 - learning_rate: 5.0000e-06\nEpoch 45/1000\n\nEpoch 45: val_loss did not improve from 2.11249\n125/125 - 23s - 182ms/step - accuracy: 0.9960 - loss: 0.3881 - val_accuracy: 0.6930 - val_loss: 2.2705 - learning_rate: 5.0000e-06\nEpoch 46/1000\n\nEpoch 46: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9952 - loss: 0.3780 - val_accuracy: 0.7490 - val_loss: 2.1832 - learning_rate: 5.0000e-06\nEpoch 47/1000\n\nEpoch 47: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9970 - loss: 0.3656 - val_accuracy: 0.7930 - val_loss: 2.2304 - learning_rate: 5.0000e-06\nEpoch 48/1000\n\nEpoch 48: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9983 - loss: 0.3543 - val_accuracy: 0.7360 - val_loss: 2.2458 - learning_rate: 5.0000e-06\nEpoch 49/1000\n\nEpoch 49: val_loss did not improve from 2.11249\n125/125 - 23s - 182ms/step - accuracy: 0.9962 - loss: 0.3484 - val_accuracy: 0.7410 - val_loss: 2.2694 - learning_rate: 5.0000e-06\nEpoch 50/1000\n\nEpoch 50: val_loss did not improve from 2.11249\n125/125 - 23s - 184ms/step - accuracy: 0.9950 - loss: 0.3402 - val_accuracy: 0.7880 - val_loss: 2.2272 - learning_rate: 5.0000e-06\nEpoch 51/1000\n\nEpoch 51: val_loss did not improve from 2.11249\n125/125 - 23s - 187ms/step - accuracy: 0.9965 - loss: 0.3273 - val_accuracy: 0.7660 - val_loss: 2.1447 - learning_rate: 5.0000e-06\nEpoch 52/1000\n\nEpoch 52: ReduceLROnPlateau reducing learning rate to 2.499999936844688e-06.\n\nEpoch 52: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9983 - loss: 0.3167 - val_accuracy: 0.7390 - val_loss: 2.2312 - learning_rate: 5.0000e-06\nEpoch 53/1000\n\nEpoch 53: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9973 - loss: 0.3100 - val_accuracy: 0.7570 - val_loss: 2.2234 - learning_rate: 2.5000e-06\nEpoch 54/1000\n\nEpoch 54: val_loss did not improve from 2.11249\n125/125 - 23s - 186ms/step - accuracy: 0.9970 - loss: 0.3072 - val_accuracy: 0.7970 - val_loss: 2.2241 - learning_rate: 2.5000e-06\nEpoch 55/1000\n\nEpoch 55: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9975 - loss: 0.3019 - val_accuracy: 0.7700 - val_loss: 2.1763 - learning_rate: 2.5000e-06\nEpoch 56/1000\n\nEpoch 56: val_loss did not improve from 2.11249\n125/125 - 23s - 181ms/step - accuracy: 0.9967 - loss: 0.2976 - val_accuracy: 0.7250 - val_loss: 2.1865 - learning_rate: 2.5000e-06\nEpoch 57/1000\n\nEpoch 57: val_loss did not improve from 2.11249\n125/125 - 23s - 182ms/step - accuracy: 0.9962 - loss: 0.2917 - val_accuracy: 0.7550 - val_loss: 2.1612 - learning_rate: 2.5000e-06\nEpoch 58/1000\n\nEpoch 58: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9980 - loss: 0.2878 - val_accuracy: 0.7680 - val_loss: 2.1511 - learning_rate: 2.5000e-06\nEpoch 59/1000\n\nEpoch 59: val_loss did not improve from 2.11249\n125/125 - 23s - 185ms/step - accuracy: 0.9990 - loss: 0.2810 - val_accuracy: 0.7820 - val_loss: 2.1932 - learning_rate: 2.5000e-06\nEpoch 60/1000\n\nEpoch 60: val_loss did not improve from 2.11249\n125/125 - 23s - 182ms/step - accuracy: 0.9977 - loss: 0.2777 - val_accuracy: 0.7290 - val_loss: 2.2024 - learning_rate: 2.5000e-06\nEpoch 61/1000\n\nEpoch 61: val_loss did not improve from 2.11249\n125/125 - 23s - 183ms/step - accuracy: 0.9977 - loss: 0.2737 - val_accuracy: 0.7200 - val_loss: 2.2009 - learning_rate: 2.5000e-06\nEpoch 62/1000\n\nEpoch 62: ReduceLROnPlateau reducing learning rate to 1.249999968422344e-06.\n\nEpoch 62: val_loss did not improve from 2.11249\n125/125 - 23s - 184ms/step - accuracy: 0.9985 - loss: 0.2678 - val_accuracy: 0.7760 - val_loss: 2.2083 - learning_rate: 2.5000e-06\nEpoch 62: early stopping\nRestoring model weights from the end of the best epoch: 32.\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate the model on the test dataset\ntest_loss, test_acc = model.evaluate(test_dataset, verbose=2)\n\nprint(f\"Test Loss: {test_loss}\")\nprint(f\"Test Accuracy: {test_acc}\")\n\nimport numpy as np\n\n# Get model predictions (probabilities) on the test dataset\npredictions = model.predict(test_dataset)\n\n# Convert probabilities to class labels (0 or 1)\npredicted_classes = (predictions > 0.5).astype(\"int32\")  # Threshold at 0.5 for binary classification\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T14:38:11.422185Z","iopub.execute_input":"2024-11-28T14:38:11.422539Z","iopub.status.idle":"2024-11-28T14:38:13.535853Z","shell.execute_reply.started":"2024-11-28T14:38:11.422513Z","shell.execute_reply":"2024-11-28T14:38:13.535145Z"}},"outputs":[{"name":"stdout","text":"4/4 - 1s - 208ms/step - accuracy: 0.6885 - loss: 1.9335\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1732804692.265559     135 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 1.933491826057434\nTest Accuracy: 0.688524603843689\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 190ms/step\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Get true labels from the test dataset\ntrue_classes = test_dataset.classes  # The true class labels for the test set\n\n# Compute the confusion matrix\ncm = confusion_matrix(true_classes, predicted_classes)\n\n# Plot the confusion matrix\nplt.figure(figsize=(6, 5))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['AD', 'CN'], yticklabels=['AD', 'CN'])\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n\nplt.savefig('confusion_matrix(vgg16).png')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T14:38:20.950124Z","iopub.execute_input":"2024-11-28T14:38:20.950458Z","iopub.status.idle":"2024-11-28T14:38:21.201856Z","shell.execute_reply.started":"2024-11-28T14:38:20.950432Z","shell.execute_reply":"2024-11-28T14:38:21.201065Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 0 Axes>"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot Accuracy\nplt.figure(figsize=(12, 6))\n\n# Training accuracy\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.title('Model Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\n# Plot Loss\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Model Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\n# Show the plots\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T14:38:46.581015Z","iopub.execute_input":"2024-11-28T14:38:46.581389Z","iopub.status.idle":"2024-11-28T14:38:47.190425Z","shell.execute_reply.started":"2024-11-28T14:38:46.581359Z","shell.execute_reply":"2024-11-28T14:38:47.189605Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"os.makedirs('/kaggle/working/test')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:07:42.386662Z","iopub.execute_input":"2024-11-01T04:07:42.387000Z","iopub.status.idle":"2024-11-01T04:07:42.391290Z","shell.execute_reply.started":"2024-11-01T04:07:42.386973Z","shell.execute_reply":"2024-11-01T04:07:42.390381Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"import sys\nfrom distutils.dir_util import copy_tree\n\n# Suppress output\noriginal_stdout = sys.stdout\nsys.stdout = open(os.devnull, 'w')\n\n# Perform the copy operation\ncopy_tree('/kaggle/input/adni1annual-2-yr-3t-2/adni1annual-2-yr-3t/test', '/kaggle/working/test')\n\n\n# Restore output\nsys.stdout.close()\nsys.stdout = original_stdout","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:08:11.529962Z","iopub.execute_input":"2024-11-01T04:08:11.530312Z","iopub.status.idle":"2024-11-01T04:08:12.176631Z","shell.execute_reply.started":"2024-11-01T04:08:11.530282Z","shell.execute_reply":"2024-11-01T04:08:12.175857Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"remove_tree('/kaggle/working/test/MCI')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:08:29.530732Z","iopub.execute_input":"2024-11-01T04:08:29.531739Z","iopub.status.idle":"2024-11-01T04:08:29.548975Z","shell.execute_reply.started":"2024-11-01T04:08:29.531698Z","shell.execute_reply":"2024-11-01T04:08:29.548227Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"ts = test_gen.flow_from_directory(\n    directory=r'/kaggle/working/test',\n    class_mode = 'binary',\n    target_size = (224, 224),\n    batch_size = BATCH_SIZE,\n    shuffle=False\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:08:40.044985Z","iopub.execute_input":"2024-11-01T04:08:40.045603Z","iopub.status.idle":"2024-11-01T04:08:40.066347Z","shell.execute_reply.started":"2024-11-01T04:08:40.045572Z","shell.execute_reply":"2024-11-01T04:08:40.065455Z"}},"outputs":[{"name":"stdout","text":"Found 395 images belonging to 2 classes.\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import tensorflow as tf\n\n# Load the model\nmodel_path = '/kaggle/input/predict-alzheimers-disease/keras/default/1/best_model_(VGG16).keras'\nmodel = tf.keras.models.load_model(model_path)\n\n# Print model summary to see output sizes and layer configurations\nmodel.summary()\n\n# Check the model's output shape directly\noutput_shape = model.output_shape\nprint(\"Model output shape:\", output_shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:01:00.199220Z","iopub.execute_input":"2024-11-01T04:01:00.199792Z","iopub.status.idle":"2024-11-01T04:01:01.853799Z","shell.execute_reply.started":"2024-11-01T04:01:00.199758Z","shell.execute_reply":"2024-11-01T04:01:01.852942Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │         \u001b[38;5;34m1,792\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m36,928\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │       \u001b[38;5;34m147,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m1,180,160\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling2d        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │       \u001b[38;5;34m525,312\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │         \u001b[38;5;34m1,025\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,180,160</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling2d        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │       <span style=\"color: #00af00; text-decoration-color: #00af00\">525,312</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,025</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m16,293,701\u001b[0m (62.16 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">16,293,701</span> (62.16 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m526,337\u001b[0m (2.01 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">526,337</span> (2.01 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m1,052,676\u001b[0m (4.02 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,052,676</span> (4.02 MB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Model output shape: (None, 1)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"result = model.evaluate(ts, return_dict=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:08:46.367288Z","iopub.execute_input":"2024-11-01T04:08:46.367638Z","iopub.status.idle":"2024-11-01T04:09:02.031658Z","shell.execute_reply.started":"2024-11-01T04:08:46.367613Z","shell.execute_reply":"2024-11-01T04:09:02.030746Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 1s/step - accuracy: 0.5866 - auc: 0.4581 - loss: 1.0119 \n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:09:02.033386Z","iopub.execute_input":"2024-11-01T04:09:02.033678Z","iopub.status.idle":"2024-11-01T04:09:02.039234Z","shell.execute_reply.started":"2024-11-01T04:09:02.033653Z","shell.execute_reply":"2024-11-01T04:09:02.038370Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 0.6202531456947327,\n 'auc': 0.6622779965400696,\n 'loss': 1.0053778886795044}"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\n\n# Step 1: Generate predictions on the test dataset\ny_pred_prob = model.predict(ts)\ny_pred_labels = (y_pred_prob > 0.5).astype(int).flatten()  # Convert probabilities to binary labels\n\n# Step 2: Extract true labels from the dataset\ny_true = np.concatenate([y for x, y in ts], axis=0).astype(int).flatten()  # Flatten in case y is a one-dimensional array\n\n# Step 3: Calculate the confusion matrix\ncm = confusion_matrix(y_true, y_pred_labels)\n\n# Step 4: Plot the confusion matrix\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Class 0\", \"Class 1\"])\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(\"Confusion Matrix\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T04:14:02.618115Z","iopub.execute_input":"2024-11-01T04:14:02.618504Z","iopub.status.idle":"2024-11-01T04:16:39.306211Z","shell.execute_reply.started":"2024-11-01T04:14:02.618472Z","shell.execute_reply":"2024-11-01T04:16:39.305055Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 134ms/step\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[34], line 11\u001b[0m\n\u001b[1;32m      8\u001b[0m y_pred_labels \u001b[38;5;241m=\u001b[39m (y_pred_prob \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0.5\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\u001b[38;5;241m.\u001b[39mflatten()  \u001b[38;5;66;03m# Convert probabilities to binary labels\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Step 2: Extract true labels from the dataset\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m y_true \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mconcatenate([y \u001b[38;5;28;01mfor\u001b[39;00m x, y \u001b[38;5;129;01min\u001b[39;00m ts], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\u001b[38;5;241m.\u001b[39mflatten()  \u001b[38;5;66;03m# Flatten in case y is a one-dimensional array\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Step 3: Calculate the confusion matrix\u001b[39;00m\n\u001b[1;32m     14\u001b[0m cm \u001b[38;5;241m=\u001b[39m confusion_matrix(y_true, y_pred_labels)\n","Cell \u001b[0;32mIn[34], line 11\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      8\u001b[0m y_pred_labels \u001b[38;5;241m=\u001b[39m (y_pred_prob \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0.5\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\u001b[38;5;241m.\u001b[39mflatten()  \u001b[38;5;66;03m# Convert probabilities to binary labels\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Step 2: Extract true labels from the dataset\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m y_true \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mconcatenate([y \u001b[38;5;28;01mfor\u001b[39;00m x, y \u001b[38;5;129;01min\u001b[39;00m ts], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\u001b[38;5;241m.\u001b[39mflatten()  \u001b[38;5;66;03m# Flatten in case y is a one-dimensional array\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Step 3: Calculate the confusion matrix\u001b[39;00m\n\u001b[1;32m     14\u001b[0m cm \u001b[38;5;241m=\u001b[39m confusion_matrix(y_true, y_pred_labels)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:112\u001b[0m, in \u001b[0;36mIterator.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    109\u001b[0m     index_array \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mnext\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex_generator)\n\u001b[1;32m    110\u001b[0m \u001b[38;5;66;03m# The transformation of images is not under thread lock\u001b[39;00m\n\u001b[1;32m    111\u001b[0m \u001b[38;5;66;03m# so it can be done in parallel\u001b[39;00m\n\u001b[0;32m--> 112\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_batches_of_transformed_samples\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindex_array\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:313\u001b[0m, in \u001b[0;36mBatchFromFilesMixin._get_batches_of_transformed_samples\u001b[0;34m(self, index_array)\u001b[0m\n\u001b[1;32m    311\u001b[0m filepaths \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfilepaths\n\u001b[1;32m    312\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(index_array):\n\u001b[0;32m--> 313\u001b[0m     img \u001b[38;5;241m=\u001b[39m \u001b[43mimage_utils\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload_img\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    314\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilepaths\u001b[49m\u001b[43m[\u001b[49m\u001b[43mj\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    315\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolor_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolor_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    316\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtarget_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtarget_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    317\u001b[0m \u001b[43m        \u001b[49m\u001b[43minterpolation\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterpolation\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    318\u001b[0m \u001b[43m        \u001b[49m\u001b[43mkeep_aspect_ratio\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mkeep_aspect_ratio\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    319\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    320\u001b[0m     x \u001b[38;5;241m=\u001b[39m image_utils\u001b[38;5;241m.\u001b[39mimg_to_array(img, data_format\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdata_format)\n\u001b[1;32m    321\u001b[0m     \u001b[38;5;66;03m# Pillow images should be closed after `load_img`,\u001b[39;00m\n\u001b[1;32m    322\u001b[0m     \u001b[38;5;66;03m# but not PIL images.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/image_utils.py:292\u001b[0m, in \u001b[0;36mload_img\u001b[0;34m(path, color_mode, target_size, interpolation, keep_aspect_ratio)\u001b[0m\n\u001b[1;32m    290\u001b[0m             img \u001b[38;5;241m=\u001b[39m img\u001b[38;5;241m.\u001b[39mresize(width_height_tuple, resample, box\u001b[38;5;241m=\u001b[39mcrop_box)\n\u001b[1;32m    291\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 292\u001b[0m             img \u001b[38;5;241m=\u001b[39m \u001b[43mimg\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresize\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwidth_height_tuple\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mresample\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    293\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m img\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/PIL/Image.py:2157\u001b[0m, in \u001b[0;36mImage.resize\u001b[0;34m(self, size, resample, box, reducing_gap)\u001b[0m\n\u001b[1;32m   2153\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[1;32m   2155\u001b[0m size \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(size)\n\u001b[0;32m-> 2157\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2158\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m box \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   2159\u001b[0m     box \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m) \u001b[38;5;241m+\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msize\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/PIL/ImageFile.py:269\u001b[0m, in \u001b[0;36mImageFile.load\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    266\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m(msg)\n\u001b[1;32m    268\u001b[0m b \u001b[38;5;241m=\u001b[39m b \u001b[38;5;241m+\u001b[39m s\n\u001b[0;32m--> 269\u001b[0m n, err_code \u001b[38;5;241m=\u001b[39m \u001b[43mdecoder\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecode\u001b[49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    270\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    271\u001b[0m     \u001b[38;5;28;01mbreak\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":34},{"cell_type":"code","source":"\ndesired_input_shape = (150, 150, 3)\ninput_layer = Input(shape=desired_input_shape)\n\n# Load MobileNetV2 pre-trained on ImageNet data but without the top classification layer\nbase_model_mobilenet = VGG19(weights='imagenet', include_top=False, input_tensor=input_layer)\n\n# Freeze the layers of the base_model\nfor layer in base_model_mobilenet.layers:\n    layer.trainable = False\n\n# Add custom layers on top of MobileNetV2 with L2 regularization\nx = base_model_mobilenet.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu', kernel_regularizer=l2(0.001))(x)\nx = Dropout(0.5)(x)\nx = Dense(256, activation='relu', kernel_regularizer=l2(0.001))(x)\nx = Dropout(0.3)(x)\npredictions_mobilenet = Dense(1, activation='sigmoid', kernel_regularizer=l2(0.001))(x)\n\n# This is the MobileNetV2 model we will train\nmobilenet_model = Model(inputs=base_model_mobilenet.input, outputs=predictions_mobilenet)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T13:17:12.627618Z","iopub.execute_input":"2024-11-28T13:17:12.628077Z","iopub.status.idle":"2024-11-28T13:17:13.804646Z","shell.execute_reply.started":"2024-11-28T13:17:12.628025Z","shell.execute_reply":"2024-11-28T13:17:13.803621Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m80134624/80134624\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"base_model_resnet = VGG16(weights='imagenet', include_top=False, input_tensor=input_layer)\n\n# Freeze the layers of the base_model\nfor layer in base_model_resnet.layers:\n    layer.trainable = False\n\n# Add custom layers on top of ResNet50 with L2 regularization\nx = base_model_resnet.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu', kernel_regularizer=l2(0.001))(x)\nx = Dropout(0.5)(x)\nx = Dense(256, activation='relu', kernel_regularizer=l2(0.001))(x)\nx = Dropout(0.3)(x)\nx = Dense(128, activation='relu', kernel_regularizer=l2(0.001))(x)\npredictions_resnet = Dense(1, activation='sigmoid', kernel_regularizer=l2(0.001))(x)\n\n# This is the ResNet50 model we will train\nresnet_model = Model(inputs=base_model_resnet.input, outputs=predictions_resnet)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:46:09.902670Z","iopub.execute_input":"2024-10-30T14:46:09.902967Z","iopub.status.idle":"2024-10-30T14:46:10.529363Z","shell.execute_reply.started":"2024-10-30T14:46:09.902942Z","shell.execute_reply":"2024-10-30T14:46:10.528464Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# Define the function to create the ensemble model\ndef ensemble(models, model_input):\n    outputs = [model(model_input) for model in models]\n    y = Average()(outputs)\n    model = Model(model_input, y, name='ensemble')\n    return model\n\n# Create the ensemble model\nensemble_model = ensemble([resnet_model, mobilenet_model], input_layer)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:46:10.530422Z","iopub.execute_input":"2024-10-30T14:46:10.530704Z","iopub.status.idle":"2024-10-30T14:46:10.541917Z","shell.execute_reply.started":"2024-10-30T14:46:10.530679Z","shell.execute_reply":"2024-10-30T14:46:10.541061Z"},"trusted":true},"outputs":[],"execution_count":17},{"cell_type":"code","source":"ensemble_model.compile(optimizer=Adam(learning_rate=0.001), \n              loss='binary_crossentropy', \n              metrics=['accuracy', tf.keras.metrics.AUC(name='auc')])\n\n# View the structure of the ensemble model\nensemble_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:46:10.542964Z","iopub.execute_input":"2024-10-30T14:46:10.543228Z","iopub.status.idle":"2024-10-30T14:46:10.585216Z","shell.execute_reply.started":"2024-10-30T14:46:10.543200Z","shell.execute_reply":"2024-10-30T14:46:10.584381Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"ensemble\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"ensemble\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_layer         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ functional_3        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │ \u001b[38;5;34m15,141,697\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mFunctional\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ functional_1        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │ \u001b[38;5;34m20,418,625\u001b[0m │ input_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mFunctional\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ average (\u001b[38;5;33mAverage\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ functional_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│                     │                   │            │ functional_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_layer         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ functional_3        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │ <span style=\"color: #00af00; text-decoration-color: #00af00\">15,141,697</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ functional_1        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │ <span style=\"color: #00af00; text-decoration-color: #00af00\">20,418,625</span> │ input_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ average (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Average</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ functional_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│                     │                   │            │ functional_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m35,560,322\u001b[0m (135.65 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">35,560,322</span> (135.65 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m821,250\u001b[0m (3.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">821,250</span> (3.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m34,739,072\u001b[0m (132.52 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">34,739,072</span> (132.52 MB)\n</pre>\n"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=1)\nmodel_checkpoint = ModelCheckpoint('best_model_(ensemble).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=1e-6, verbose=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:46:10.586294Z","iopub.execute_input":"2024-10-30T14:46:10.586557Z","iopub.status.idle":"2024-10-30T14:46:10.592323Z","shell.execute_reply.started":"2024-10-30T14:46:10.586534Z","shell.execute_reply":"2024-10-30T14:46:10.591390Z"},"trusted":true},"outputs":[],"execution_count":19},{"cell_type":"code","source":"\n# Train the model\nhistory = ensemble_model.fit(\n                    train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr],\n                    epochs=500,\n                    verbose=1\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ensemble_model.evaluate(test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:58:47.625761Z","iopub.execute_input":"2024-10-30T15:58:47.626621Z","iopub.status.idle":"2024-10-30T15:58:49.972854Z","shell.execute_reply.started":"2024-10-30T15:58:47.626587Z","shell.execute_reply":"2024-10-30T15:58:49.971910Z"},"trusted":true},"outputs":[{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 627ms/step - accuracy: 0.5065 - auc: 0.7641 - loss: 1.1153\n","output_type":"stream"},{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"[0.7656199336051941, 0.6803278923034668, 0.9345605969429016]"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# train_data, train_label = next(train_dataset)\n# print(train_data.shape, train_label.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.865884Z","iopub.execute_input":"2024-10-30T15:24:44.866556Z","iopub.status.idle":"2024-10-30T15:24:44.870385Z","shell.execute_reply.started":"2024-10-30T15:24:44.866522Z","shell.execute_reply":"2024-10-30T15:24:44.869464Z"},"trusted":true},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# sm = SMOTE(random_state=42)\n\n# train_data, train_label = sm.fit_resample(train_data.reshape(-1, 224*224*3), train_label)\n# train_data = train_data.reshape(-1, 224,224,3)\n\n# print(train_data.shape,  train_label.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.871705Z","iopub.execute_input":"2024-10-30T15:24:44.872019Z","iopub.status.idle":"2024-10-30T15:24:44.879026Z","shell.execute_reply.started":"2024-10-30T15:24:44.871994Z","shell.execute_reply":"2024-10-30T15:24:44.878155Z"},"trusted":true},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# test_data, test_label = next(test_dataset)\n# print(test_data.shape, test_label.shape)\n\n# val_data, val_label = next(val_dataset)\n# print(val_data.shape, val_label.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.880183Z","iopub.execute_input":"2024-10-30T15:24:44.880497Z","iopub.status.idle":"2024-10-30T15:24:44.887091Z","shell.execute_reply.started":"2024-10-30T15:24:44.880467Z","shell.execute_reply":"2024-10-30T15:24:44.886315Z"},"trusted":true},"outputs":[],"execution_count":23},{"cell_type":"code","source":"# test_data, test_label = sm.fit_resample(test_data.reshape(-1, 224*224*3), test_label)\n# test_data = test_data.reshape(-1, 224,224,3)\n\n# print(test_data.shape,  test_label.shape)\n\n# val_data, val_label = sm.fit_resample(val_data.reshape(-1, 224*224*3), val_label)\n# val_data = val_data.reshape(-1, 224,224,3)\n\n# print(val_data.shape,  val_label.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.888118Z","iopub.execute_input":"2024-10-30T15:24:44.888353Z","iopub.status.idle":"2024-10-30T15:24:44.894943Z","shell.execute_reply.started":"2024-10-30T15:24:44.888332Z","shell.execute_reply":"2024-10-30T15:24:44.894194Z"},"trusted":true},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# # Count the number of samples for each class\n# class_counts = np.sum(train_label, axis=0)\n\n# count_aug_images = pd.DataFrame({\n#     'class': CLASSES,\n#     'count': class_counts\n# })\n# plt.figure(figsize=(7, 3))\n# sns.barplot(data=count_aug_images, x='class', y='count')\n# plt.xticks(rotation=30)\n# plt.title('Dataset')\n\n# print(class_counts)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.896188Z","iopub.execute_input":"2024-10-30T15:24:44.896899Z","iopub.status.idle":"2024-10-30T15:24:44.905826Z","shell.execute_reply.started":"2024-10-30T15:24:44.896869Z","shell.execute_reply":"2024-10-30T15:24:44.905004Z"},"trusted":true},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# batch_size = 32\n\n# train_dataset = tf.data.Dataset.from_tensor_slices((train_data, train_label))\n# train_dataset = train_dataset.shuffle(buffer_size=len(train_data)).batch(batch_size).prefetch(buffer_size=tf.data.AUTOTUNE)\n\n# val_dataset = tf.data.Dataset.from_tensor_slices((val_data, val_label))\n# val_dataset = val_dataset.batch(batch_size).repeat().prefetch(buffer_size=tf.data.AUTOTUNE)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.906870Z","iopub.execute_input":"2024-10-30T15:24:44.907122Z","iopub.status.idle":"2024-10-30T15:24:44.913382Z","shell.execute_reply.started":"2024-10-30T15:24:44.907101Z","shell.execute_reply":"2024-10-30T15:24:44.912607Z"},"trusted":true},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# test_dataset = tf.data.Dataset.from_tensor_slices((test_data, test_label))\n# test_dataset = test_dataset.batch(batch_size).prefetch(buffer_size=tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:24:44.914409Z","iopub.execute_input":"2024-10-30T15:24:44.914699Z","iopub.status.idle":"2024-10-30T15:24:44.920366Z","shell.execute_reply.started":"2024-10-30T15:24:44.914676Z","shell.execute_reply":"2024-10-30T15:24:44.919585Z"},"trusted":true},"outputs":[],"execution_count":27},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# VGG16 model ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, roc_curve, auc, confusion_matrix, ConfusionMatrixDisplay","metadata":{"execution":{"iopub.status.busy":"2024-11-02T00:33:19.343612Z","iopub.execute_input":"2024-11-02T00:33:19.344567Z","iopub.status.idle":"2024-11-02T00:33:19.348904Z","shell.execute_reply.started":"2024-11-02T00:33:19.344530Z","shell.execute_reply":"2024-11-02T00:33:19.347850Z"},"trusted":true},"outputs":[],"execution_count":15},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import backend as K\n\nimport tensorflow as tf\n\nclass F1Score(tf.keras.metrics.Metric):\n    def __init__(self, name='f1_score', **kwargs):\n        super(F1Score, self).__init__(name=name, **kwargs)\n        self.precision = tf.keras.metrics.Precision()\n        self.recall = tf.keras.metrics.Recall()\n    \n    def update_state(self, y_true, y_pred, sample_weight=None):\n        self.precision.update_state(y_true, y_pred, sample_weight)\n        self.recall.update_state(y_true, y_pred, sample_weight)\n    \n    def result(self):\n        precision = self.precision.result()\n        recall = self.recall.result()\n        return 2 * ((precision * recall) / (precision + recall + tf.keras.backend.epsilon()))\n    \n    def reset_states(self):\n        self.precision.reset_states()\n        self.recall.reset_states()\n\n# Adding F1Score to the metrics list\nMETRICS = [\n    tf.keras.metrics.BinaryAccuracy(name='accuracy'),\n    tf.keras.metrics.Precision(name='precision'),\n    tf.keras.metrics.Recall(name='recall'),\n    tf.keras.metrics.AUC(name='auc'),\n    F1Score(name='f1_score')\n]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T03:58:44.645787Z","iopub.execute_input":"2024-11-02T03:58:44.646416Z","iopub.status.idle":"2024-11-02T03:58:44.671011Z","shell.execute_reply.started":"2024-11-02T03:58:44.646384Z","shell.execute_reply":"2024-11-02T03:58:44.670255Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# Load the VGG16 model pre-trained on ImageNet, excluding the top layers\nbase_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Add custom layers on top of the base model\nx = base_model.output\nx = Flatten()(x)\n# x = Dense(1024, activation='relu',  kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n# x = Dropout(0.4)(x)\nx = Dense(512, activation='relu',  kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\nx = Dropout(0.4)(x)\nx = Dense(256, activation='relu',  kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\npredictions = Dense(1, activation='sigmoid')(x)  # Adjust the number of classes as needed\n\n# Create the final model\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freeze the layers of the base model\nfor layer in base_model.layers[:-8]:\n    layer.trainable = False\n\n# Compile the model with sparse_categorical_crossentropy\nmodel.compile(optimizer=Adam(learning_rate=0.0001), \n              loss='binary_crossentropy', \n              metrics=METRICS)","metadata":{"execution":{"iopub.status.busy":"2024-11-02T03:58:52.539131Z","iopub.execute_input":"2024-11-02T03:58:52.539458Z","iopub.status.idle":"2024-11-02T03:58:52.817096Z","shell.execute_reply.started":"2024-11-02T03:58:52.539432Z","shell.execute_reply":"2024-11-02T03:58:52.816335Z"},"trusted":true},"outputs":[],"execution_count":26},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=40, restore_best_weights=True,verbose=1)\nmodel_checkpoint = ModelCheckpoint('best_model_(VGG16).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=20, min_lr=1e-10, verbose=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-02T03:58:53.697930Z","iopub.execute_input":"2024-11-02T03:58:53.698256Z","iopub.status.idle":"2024-11-02T03:58:53.703856Z","shell.execute_reply.started":"2024-11-02T03:58:53.698232Z","shell.execute_reply":"2024-11-02T03:58:53.702880Z"},"trusted":true},"outputs":[],"execution_count":27},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T03:58:59.520871Z","iopub.execute_input":"2024-11-02T03:58:59.521870Z","iopub.status.idle":"2024-11-02T03:58:59.557933Z","shell.execute_reply.started":"2024-11-02T03:58:59.521657Z","shell.execute_reply":"2024-11-02T03:58:59.557073Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_7\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_7\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_3 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │         \u001b[38;5;34m1,792\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m36,928\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │       \u001b[38;5;34m147,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m1,180,160\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_3 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │    \u001b[38;5;34m12,845,568\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m257\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,180,160</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">12,845,568</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">257</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m27,691,841\u001b[0m (105.64 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">27,691,841</span> (105.64 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m25,956,353\u001b[0m (99.02 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">25,956,353</span> (99.02 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,735,488\u001b[0m (6.62 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,735,488</span> (6.62 MB)\n</pre>\n"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# from tensorflow.keras.callbacks import Callback\n# from tensorflow.keras.models import clone_model\n\n# class EpochDisplay(Callback):\n#     def __init__(self, model, test_dataset):\n#         super(EpochDisplay, self).__init__()\n#         self.min_val_loss = float('inf')\n#         self.min_val_loss_epoch = 0\n#         self.models = []\n#         self.test_results = []\n#         self.model_ = model\n#         self.test_dataset = test_dataset\n        \n#     def on_epoch_end(self, epoch, logs=None):\n#         if (epoch+1) % 50 == 0:\n#             print(f'Epoch: {epoch+1}')\n#             for key, value in logs.items():\n#                 print(f'{key} : {value:.4}', end=' ')\n#             print()\n            \n#         # Check if the current epoch has the minimum val_loss\n#         if logs.get('val_loss') is not None:\n#             if logs['val_loss'] < self.min_val_loss:\n#                 self.min_val_loss = logs['val_loss']\n#                 self.min_val_loss_epoch = epoch + 1\n                \n#                 print(f'Epoch: {epoch+1}')\n#                 for key, value in logs.items():\n#                     print(f'{key} : {value:.4}', end=' ')\n#                 print()\n#                 loss, acc, auc = self.model_.evaluate(self.test_dataset, verbose=0)\n#                 self.models.append(clone_model(self.model_))\n#                 self.test_results.append((loss, acc));\n#                 print(f'Test accuracy: {acc} and Test loss: {loss}')\n                \n                \n                \n\n#     def on_train_end(self, logs=None):\n#         # Display the epoch with the minimum val_loss at the end of training\n#         print(f'\\nThe minimum val_loss of {self.min_val_loss:.4f} was achieved at epoch {self.min_val_loss_epoch}.')\n\n# epoch_display = EpochDisplay(model, test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-11-02T03:59:00.012204Z","iopub.execute_input":"2024-11-02T03:59:00.012556Z","iopub.status.idle":"2024-11-02T03:59:00.018034Z","shell.execute_reply.started":"2024-11-02T03:59:00.012528Z","shell.execute_reply":"2024-11-02T03:59:00.017044Z"},"trusted":true},"outputs":[],"execution_count":29},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Train the model\nhistory = model.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T03:59:01.741775Z","iopub.execute_input":"2024-11-02T03:59:01.742414Z","iopub.status.idle":"2024-11-02T04:57:37.435837Z","shell.execute_reply.started":"2024-11-02T03:59:01.742385Z","shell.execute_reply":"2024-11-02T04:57:37.434848Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/500\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730519951.159283     199 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - accuracy: 0.5985 - auc: 0.6463 - f1_score: 0.5928 - loss: 10.6468 - precision: 0.5988 - recall: 0.5880","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730519992.279778     197 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1: val_loss improved from inf to 4.56008, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 376ms/step - accuracy: 0.5993 - auc: 0.6475 - f1_score: 0.5937 - loss: 10.6262 - precision: 0.5996 - recall: 0.5889 - val_accuracy: 0.8145 - val_auc: 0.8663 - val_f1_score: 0.8224 - val_loss: 4.5601 - val_precision: 0.7831 - val_recall: 0.8659 - learning_rate: 1.0000e-04\nEpoch 2/500\n\nEpoch 2: val_loss did not improve from 4.56008\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 5.3902 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 3/500\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730519998.626029     197 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9256 - auc: 0.9779 - f1_score: 0.9255 - loss: 3.7533 - precision: 0.9275 - recall: 0.9235\nEpoch 3: val_loss improved from 4.56008 to 3.77070, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m48s\u001b[0m 363ms/step - accuracy: 0.9256 - auc: 0.9779 - f1_score: 0.9255 - loss: 3.7496 - precision: 0.9276 - recall: 0.9236 - val_accuracy: 0.7792 - val_auc: 0.7975 - val_f1_score: 0.7868 - val_loss: 3.7707 - val_precision: 0.7551 - val_recall: 0.8211 - learning_rate: 1.0000e-04\nEpoch 4/500\n\nEpoch 4: val_loss improved from 3.77070 to 2.44975, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 2.4498 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 5/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9725 - auc: 0.9939 - f1_score: 0.9730 - loss: 2.3221 - precision: 0.9724 - recall: 0.9736\nEpoch 5: val_loss did not improve from 2.44975\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9725 - auc: 0.9939 - f1_score: 0.9730 - loss: 2.3205 - precision: 0.9725 - recall: 0.9736 - val_accuracy: 0.8105 - val_auc: 0.8142 - val_f1_score: 0.8233 - val_loss: 3.7785 - val_precision: 0.7657 - val_recall: 0.8902 - learning_rate: 1.0000e-04\nEpoch 6/500\n\nEpoch 6: val_loss improved from 2.44975 to 1.71731, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 1.7173 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 7/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9887 - auc: 0.9994 - f1_score: 0.9886 - loss: 1.6212 - precision: 0.9888 - recall: 0.9885\nEpoch 7: val_loss did not improve from 1.71731\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9887 - auc: 0.9994 - f1_score: 0.9886 - loss: 1.6203 - precision: 0.9888 - recall: 0.9885 - val_accuracy: 0.7732 - val_auc: 0.7991 - val_f1_score: 0.7805 - val_loss: 2.7688 - val_precision: 0.7505 - val_recall: 0.8130 - learning_rate: 1.0000e-04\nEpoch 8/500\n\nEpoch 8: val_loss improved from 1.71731 to 1.26069, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 1.2607 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 9/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9959 - auc: 0.9999 - f1_score: 0.9959 - loss: 1.1880 - precision: 0.9953 - recall: 0.9965\nEpoch 9: val_loss did not improve from 1.26069\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9959 - auc: 0.9999 - f1_score: 0.9959 - loss: 1.1875 - precision: 0.9952 - recall: 0.9965 - val_accuracy: 0.7157 - val_auc: 0.7801 - val_f1_score: 0.7069 - val_loss: 2.4478 - val_precision: 0.7234 - val_recall: 0.6911 - learning_rate: 1.0000e-04\nEpoch 10/500\n\nEpoch 10: val_loss improved from 1.26069 to 1.15337, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 1.1534 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 11/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9929 - auc: 0.9997 - f1_score: 0.9929 - loss: 0.9102 - precision: 0.9948 - recall: 0.9909\nEpoch 11: val_loss did not improve from 1.15337\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9928 - auc: 0.9997 - f1_score: 0.9928 - loss: 0.9097 - precision: 0.9948 - recall: 0.9909 - val_accuracy: 0.7470 - val_auc: 0.7707 - val_f1_score: 0.7472 - val_loss: 2.5273 - val_precision: 0.7405 - val_recall: 0.7541 - learning_rate: 1.0000e-04\nEpoch 12/500\n\nEpoch 12: val_loss improved from 1.15337 to 0.72965, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.7297 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 13/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - accuracy: 0.9948 - auc: 0.9991 - f1_score: 0.9949 - loss: 0.6973 - precision: 0.9969 - recall: 0.9929\nEpoch 13: val_loss did not improve from 0.72965\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 358ms/step - accuracy: 0.9948 - auc: 0.9991 - f1_score: 0.9949 - loss: 0.6970 - precision: 0.9969 - recall: 0.9929 - val_accuracy: 0.7692 - val_auc: 0.7898 - val_f1_score: 0.7757 - val_loss: 2.4057 - val_precision: 0.7486 - val_recall: 0.8049 - learning_rate: 1.0000e-04\nEpoch 14/500\n\nEpoch 14: val_loss improved from 0.72965 to 0.56482, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.5648 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 15/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - accuracy: 0.9981 - auc: 0.9999 - f1_score: 0.9981 - loss: 0.5425 - precision: 0.9973 - recall: 0.9989\nEpoch 15: val_loss did not improve from 0.56482\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 358ms/step - accuracy: 0.9981 - auc: 0.9999 - f1_score: 0.9981 - loss: 0.5423 - precision: 0.9973 - recall: 0.9989 - val_accuracy: 0.7339 - val_auc: 0.7925 - val_f1_score: 0.7312 - val_loss: 1.7880 - val_precision: 0.7327 - val_recall: 0.7297 - learning_rate: 1.0000e-04\nEpoch 16/500\n\nEpoch 16: val_loss improved from 0.56482 to 0.45358, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.4536 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 17/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9957 - auc: 0.9997 - f1_score: 0.9956 - loss: 0.4352 - precision: 0.9986 - recall: 0.9927\nEpoch 17: val_loss did not improve from 0.45358\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9957 - auc: 0.9997 - f1_score: 0.9956 - loss: 0.4351 - precision: 0.9986 - recall: 0.9926 - val_accuracy: 0.7651 - val_auc: 0.7801 - val_f1_score: 0.7762 - val_loss: 2.0916 - val_precision: 0.7359 - val_recall: 0.8211 - learning_rate: 1.0000e-04\nEpoch 18/500\n\nEpoch 18: val_loss improved from 0.45358 to 0.36233, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.3623 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 19/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 325ms/step - accuracy: 0.9968 - auc: 0.9999 - f1_score: 0.9968 - loss: 0.3530 - precision: 0.9962 - recall: 0.9974\nEpoch 19: val_loss did not improve from 0.36233\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 359ms/step - accuracy: 0.9968 - auc: 0.9999 - f1_score: 0.9968 - loss: 0.3529 - precision: 0.9962 - recall: 0.9974 - val_accuracy: 0.6764 - val_auc: 0.7269 - val_f1_score: 0.6515 - val_loss: 2.9291 - val_precision: 0.6993 - val_recall: 0.6098 - learning_rate: 1.0000e-04\nEpoch 20/500\n\nEpoch 20: val_loss did not improve from 0.36233\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 600us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.7500 - val_auc: 0.0000e+00 - val_f1_score: 0.8571 - val_loss: 0.7507 - val_precision: 1.0000 - val_recall: 0.7500 - learning_rate: 1.0000e-04\nEpoch 21/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9971 - auc: 0.9997 - f1_score: 0.9971 - loss: 0.2884 - precision: 0.9982 - recall: 0.9960\nEpoch 21: val_loss did not improve from 0.36233\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 358ms/step - accuracy: 0.9971 - auc: 0.9997 - f1_score: 0.9971 - loss: 0.2883 - precision: 0.9982 - recall: 0.9961 - val_accuracy: 0.6774 - val_auc: 0.7217 - val_f1_score: 0.6537 - val_loss: 2.6921 - val_precision: 0.6991 - val_recall: 0.6138 - learning_rate: 1.0000e-04\nEpoch 22/500\n\nEpoch 22: val_loss improved from 0.36233 to 0.24157, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.2416 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 23/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9987 - auc: 1.0000 - f1_score: 0.9987 - loss: 0.2334 - precision: 0.9995 - recall: 0.9978\nEpoch 23: val_loss did not improve from 0.24157\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 356ms/step - accuracy: 0.9987 - auc: 1.0000 - f1_score: 0.9987 - loss: 0.2334 - precision: 0.9995 - recall: 0.9978 - val_accuracy: 0.6552 - val_auc: 0.7145 - val_f1_score: 0.6242 - val_loss: 2.6640 - val_precision: 0.6794 - val_recall: 0.5772 - learning_rate: 1.0000e-04\nEpoch 24/500\n\nEpoch 24: val_loss improved from 0.24157 to 0.21147, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.2115 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 25/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9963 - auc: 0.9989 - f1_score: 0.9963 - loss: 0.2044 - precision: 0.9949 - recall: 0.9977\nEpoch 25: val_loss did not improve from 0.21147\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 357ms/step - accuracy: 0.9963 - auc: 0.9989 - f1_score: 0.9963 - loss: 0.2043 - precision: 0.9950 - recall: 0.9977 - val_accuracy: 0.7782 - val_auc: 0.8002 - val_f1_score: 0.7876 - val_loss: 2.9535 - val_precision: 0.7500 - val_recall: 0.8293 - learning_rate: 1.0000e-04\nEpoch 26/500\n\nEpoch 26: val_loss improved from 0.21147 to 0.16355, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.1635 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 27/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9956 - auc: 0.9999 - f1_score: 0.9957 - loss: 0.1689 - precision: 0.9962 - recall: 0.9952\nEpoch 27: val_loss did not improve from 0.16355\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9956 - auc: 0.9999 - f1_score: 0.9957 - loss: 0.1688 - precision: 0.9962 - recall: 0.9952 - val_accuracy: 0.7308 - val_auc: 0.7893 - val_f1_score: 0.7262 - val_loss: 1.7099 - val_precision: 0.7329 - val_recall: 0.7195 - learning_rate: 1.0000e-04\nEpoch 28/500\n\nEpoch 28: val_loss did not improve from 0.16355\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 571us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.4765 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 29/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9922 - auc: 0.9994 - f1_score: 0.9922 - loss: 0.1529 - precision: 0.9941 - recall: 0.9903\nEpoch 29: val_loss did not improve from 0.16355\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9922 - auc: 0.9994 - f1_score: 0.9922 - loss: 0.1529 - precision: 0.9941 - recall: 0.9903 - val_accuracy: 0.6895 - val_auc: 0.7153 - val_f1_score: 0.6709 - val_loss: 2.6921 - val_precision: 0.7072 - val_recall: 0.6382 - learning_rate: 1.0000e-04\nEpoch 30/500\n\nEpoch 30: val_loss improved from 0.16355 to 0.12538, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.1254 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 31/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9957 - auc: 1.0000 - f1_score: 0.9958 - loss: 0.1206 - precision: 0.9968 - recall: 0.9947\nEpoch 31: val_loss did not improve from 0.12538\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 357ms/step - accuracy: 0.9957 - auc: 1.0000 - f1_score: 0.9958 - loss: 0.1205 - precision: 0.9968 - recall: 0.9947 - val_accuracy: 0.6220 - val_auc: 0.6543 - val_f1_score: 0.5685 - val_loss: 3.3700 - val_precision: 0.6552 - val_recall: 0.5020 - learning_rate: 1.0000e-04\nEpoch 32/500\n\nEpoch 32: val_loss did not improve from 0.12538\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 567us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.7500 - val_auc: 0.0000e+00 - val_f1_score: 0.8571 - val_loss: 0.9569 - val_precision: 1.0000 - val_recall: 0.7500 - learning_rate: 1.0000e-04\nEpoch 33/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9995 - auc: 1.0000 - f1_score: 0.9995 - loss: 0.0948 - precision: 0.9989 - recall: 1.0000\nEpoch 33: val_loss did not improve from 0.12538\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9995 - auc: 1.0000 - f1_score: 0.9995 - loss: 0.0947 - precision: 0.9990 - recall: 1.0000 - val_accuracy: 0.7137 - val_auc: 0.7366 - val_f1_score: 0.7042 - val_loss: 3.3765 - val_precision: 0.7222 - val_recall: 0.6870 - learning_rate: 1.0000e-04\nEpoch 34/500\n\nEpoch 34: val_loss improved from 0.12538 to 0.08319, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0832 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 35/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9889 - auc: 0.9982 - f1_score: 0.9889 - loss: 0.1137 - precision: 0.9880 - recall: 0.9897\nEpoch 35: val_loss did not improve from 0.08319\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9889 - auc: 0.9982 - f1_score: 0.9888 - loss: 0.1139 - precision: 0.9880 - recall: 0.9896 - val_accuracy: 0.6845 - val_auc: 0.7240 - val_f1_score: 0.6645 - val_loss: 2.6969 - val_precision: 0.7029 - val_recall: 0.6301 - learning_rate: 1.0000e-04\nEpoch 36/500\n\nEpoch 36: val_loss did not improve from 0.08319\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 542us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.2831 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 37/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9961 - auc: 0.9999 - f1_score: 0.9959 - loss: 0.0813 - precision: 0.9959 - recall: 0.9960\nEpoch 37: val_loss did not improve from 0.08319\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 356ms/step - accuracy: 0.9961 - auc: 0.9999 - f1_score: 0.9959 - loss: 0.0813 - precision: 0.9959 - recall: 0.9960 - val_accuracy: 0.6452 - val_auc: 0.7402 - val_f1_score: 0.6000 - val_loss: 1.8956 - val_precision: 0.6804 - val_recall: 0.5366 - learning_rate: 1.0000e-04\nEpoch 38/500\n\nEpoch 38: val_loss did not improve from 0.08319\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 561us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.2302 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 39/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9980 - auc: 1.0000 - f1_score: 0.9981 - loss: 0.0671 - precision: 0.9989 - recall: 0.9972\nEpoch 39: val_loss did not improve from 0.08319\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9980 - auc: 1.0000 - f1_score: 0.9981 - loss: 0.0671 - precision: 0.9989 - recall: 0.9972 - val_accuracy: 0.7228 - val_auc: 0.7459 - val_f1_score: 0.7174 - val_loss: 3.0814 - val_precision: 0.7256 - val_recall: 0.7093 - learning_rate: 1.0000e-04\nEpoch 40/500\n\nEpoch 40: val_loss improved from 0.08319 to 0.05409, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0541 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 41/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9993 - auc: 1.0000 - f1_score: 0.9993 - loss: 0.0551 - precision: 0.9992 - recall: 0.9995\nEpoch 41: val_loss did not improve from 0.05409\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 356ms/step - accuracy: 0.9993 - auc: 1.0000 - f1_score: 0.9993 - loss: 0.0551 - precision: 0.9992 - recall: 0.9994 - val_accuracy: 0.7208 - val_auc: 0.7712 - val_f1_score: 0.7135 - val_loss: 2.2242 - val_precision: 0.7263 - val_recall: 0.7012 - learning_rate: 1.0000e-04\nEpoch 42/500\n\nEpoch 42: val_loss improved from 0.05409 to 0.04630, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0463 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 43/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9968 - auc: 1.0000 - f1_score: 0.9968 - loss: 0.0537 - precision: 0.9976 - recall: 0.9960\nEpoch 43: val_loss did not improve from 0.04630\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 357ms/step - accuracy: 0.9968 - auc: 1.0000 - f1_score: 0.9968 - loss: 0.0537 - precision: 0.9976 - recall: 0.9960 - val_accuracy: 0.7702 - val_auc: 0.7951 - val_f1_score: 0.7893 - val_loss: 3.2438 - val_precision: 0.7237 - val_recall: 0.8679 - learning_rate: 1.0000e-04\nEpoch 44/500\n\nEpoch 44: val_loss improved from 0.04630 to 0.04039, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0404 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 45/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9944 - auc: 0.9995 - f1_score: 0.9943 - loss: 0.0588 - precision: 0.9957 - recall: 0.9930\nEpoch 45: val_loss did not improve from 0.04039\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9944 - auc: 0.9995 - f1_score: 0.9944 - loss: 0.0588 - precision: 0.9957 - recall: 0.9930 - val_accuracy: 0.7560 - val_auc: 0.7975 - val_f1_score: 0.7585 - val_loss: 2.0660 - val_precision: 0.7451 - val_recall: 0.7724 - learning_rate: 1.0000e-04\nEpoch 46/500\n\nEpoch 46: val_loss improved from 0.04039 to 0.03666, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0367 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 47/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 325ms/step - accuracy: 0.9991 - auc: 1.0000 - f1_score: 0.9991 - loss: 0.0367 - precision: 0.9993 - recall: 0.9989\nEpoch 47: val_loss did not improve from 0.03666\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 359ms/step - accuracy: 0.9991 - auc: 1.0000 - f1_score: 0.9991 - loss: 0.0367 - precision: 0.9993 - recall: 0.9990 - val_accuracy: 0.7409 - val_auc: 0.7729 - val_f1_score: 0.7396 - val_loss: 2.8315 - val_precision: 0.7374 - val_recall: 0.7419 - learning_rate: 1.0000e-04\nEpoch 48/500\n\nEpoch 48: val_loss improved from 0.03666 to 0.03056, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0306 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 49/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9978 - auc: 0.9997 - f1_score: 0.9978 - loss: 0.0360 - precision: 0.9975 - recall: 0.9980\nEpoch 49: val_loss did not improve from 0.03056\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 351ms/step - accuracy: 0.9978 - auc: 0.9997 - f1_score: 0.9978 - loss: 0.0360 - precision: 0.9975 - recall: 0.9980 - val_accuracy: 0.7248 - val_auc: 0.7509 - val_f1_score: 0.7321 - val_loss: 3.3888 - val_precision: 0.7078 - val_recall: 0.7581 - learning_rate: 1.0000e-04\nEpoch 50/500\n\nEpoch 50: val_loss improved from 0.03056 to 0.02836, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0284 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 51/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9984 - auc: 1.0000 - f1_score: 0.9983 - loss: 0.0318 - precision: 0.9983 - recall: 0.9984\nEpoch 51: val_loss did not improve from 0.02836\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9983 - auc: 1.0000 - f1_score: 0.9983 - loss: 0.0318 - precision: 0.9983 - recall: 0.9984 - val_accuracy: 0.7369 - val_auc: 0.7712 - val_f1_score: 0.7434 - val_loss: 2.3696 - val_precision: 0.7200 - val_recall: 0.7683 - learning_rate: 1.0000e-04\nEpoch 52/500\n\nEpoch 52: val_loss improved from 0.02836 to 0.02669, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0267 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 53/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9935 - auc: 0.9996 - f1_score: 0.9931 - loss: 0.0436 - precision: 0.9956 - recall: 0.9907\nEpoch 53: val_loss did not improve from 0.02669\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9935 - auc: 0.9996 - f1_score: 0.9931 - loss: 0.0436 - precision: 0.9956 - recall: 0.9907 - val_accuracy: 0.7339 - val_auc: 0.7437 - val_f1_score: 0.7312 - val_loss: 2.8527 - val_precision: 0.7327 - val_recall: 0.7297 - learning_rate: 1.0000e-04\nEpoch 54/500\n\nEpoch 54: val_loss improved from 0.02669 to 0.02407, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0241 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 55/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323ms/step - accuracy: 0.9951 - auc: 0.9993 - f1_score: 0.9950 - loss: 0.0395 - precision: 0.9964 - recall: 0.9937\nEpoch 55: val_loss did not improve from 0.02407\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 357ms/step - accuracy: 0.9951 - auc: 0.9993 - f1_score: 0.9951 - loss: 0.0395 - precision: 0.9964 - recall: 0.9937 - val_accuracy: 0.7218 - val_auc: 0.7379 - val_f1_score: 0.7592 - val_loss: 3.0018 - val_precision: 0.6651 - val_recall: 0.8841 - learning_rate: 1.0000e-04\nEpoch 56/500\n\nEpoch 56: val_loss improved from 0.02407 to 0.02136, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0214 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 57/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9910 - auc: 0.9978 - f1_score: 0.9910 - loss: 0.0533 - precision: 0.9895 - recall: 0.9925\nEpoch 57: val_loss did not improve from 0.02136\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9910 - auc: 0.9978 - f1_score: 0.9910 - loss: 0.0531 - precision: 0.9896 - recall: 0.9925 - val_accuracy: 0.6694 - val_auc: 0.7247 - val_f1_score: 0.6450 - val_loss: 2.5217 - val_precision: 0.6898 - val_recall: 0.6057 - learning_rate: 1.0000e-04\nEpoch 58/500\n\nEpoch 58: val_loss improved from 0.02136 to 0.02026, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0203 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 59/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0190 - precision: 0.9998 - recall: 1.0000\nEpoch 59: val_loss did not improve from 0.02026\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0190 - precision: 0.9998 - recall: 1.0000 - val_accuracy: 0.7772 - val_auc: 0.7947 - val_f1_score: 0.7865 - val_loss: 2.2350 - val_precision: 0.7495 - val_recall: 0.8272 - learning_rate: 1.0000e-04\nEpoch 60/500\n\nEpoch 60: val_loss improved from 0.02026 to 0.01623, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0162 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 61/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9998 - auc: 1.0000 - f1_score: 0.9998 - loss: 0.0165 - precision: 0.9998 - recall: 0.9999\nEpoch 61: val_loss did not improve from 0.01623\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9998 - auc: 1.0000 - f1_score: 0.9998 - loss: 0.0165 - precision: 0.9998 - recall: 0.9999 - val_accuracy: 0.7349 - val_auc: 0.7722 - val_f1_score: 0.7378 - val_loss: 2.4403 - val_precision: 0.7241 - val_recall: 0.7520 - learning_rate: 1.0000e-04\nEpoch 62/500\n\nEpoch 62: val_loss did not improve from 0.01623\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 561us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0189 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 63/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0139 - precision: 0.9999 - recall: 0.9999\nEpoch 63: val_loss did not improve from 0.01623\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 351ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0140 - precision: 0.9999 - recall: 0.9999 - val_accuracy: 0.6321 - val_auc: 0.6913 - val_f1_score: 0.5848 - val_loss: 2.6580 - val_precision: 0.6641 - val_recall: 0.5224 - learning_rate: 1.0000e-04\nEpoch 64/500\n\nEpoch 64: val_loss did not improve from 0.01623\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 539us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.3329 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 65/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9984 - auc: 1.0000 - f1_score: 0.9984 - loss: 0.0184 - precision: 0.9992 - recall: 0.9976\nEpoch 65: val_loss did not improve from 0.01623\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 353ms/step - accuracy: 0.9984 - auc: 1.0000 - f1_score: 0.9984 - loss: 0.0184 - precision: 0.9992 - recall: 0.9976 - val_accuracy: 0.7339 - val_auc: 0.7657 - val_f1_score: 0.7328 - val_loss: 2.3580 - val_precision: 0.7298 - val_recall: 0.7358 - learning_rate: 1.0000e-04\nEpoch 66/500\n\nEpoch 66: val_loss improved from 0.01623 to 0.01261, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0126 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 67/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - accuracy: 0.9995 - auc: 1.0000 - f1_score: 0.9995 - loss: 0.0138 - precision: 0.9997 - recall: 0.9992\nEpoch 67: val_loss did not improve from 0.01261\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 351ms/step - accuracy: 0.9995 - auc: 1.0000 - f1_score: 0.9994 - loss: 0.0139 - precision: 0.9997 - recall: 0.9992 - val_accuracy: 0.8065 - val_auc: 0.8136 - val_f1_score: 0.8202 - val_loss: 2.5777 - val_precision: 0.7604 - val_recall: 0.8902 - learning_rate: 1.0000e-04\nEpoch 68/500\n\nEpoch 68: val_loss improved from 0.01261 to 0.01111, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0111 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 69/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9964 - auc: 0.9983 - f1_score: 0.9966 - loss: 0.0249 - precision: 0.9949 - recall: 0.9983\nEpoch 69: val_loss did not improve from 0.01111\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 352ms/step - accuracy: 0.9964 - auc: 0.9983 - f1_score: 0.9966 - loss: 0.0249 - precision: 0.9949 - recall: 0.9983 - val_accuracy: 0.7006 - val_auc: 0.7372 - val_f1_score: 0.7102 - val_loss: 2.3251 - val_precision: 0.6829 - val_recall: 0.7398 - learning_rate: 1.0000e-04\nEpoch 70/500\n\nEpoch 70: val_loss did not improve from 0.01111\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 547us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0121 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 71/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9960 - auc: 0.9999 - f1_score: 0.9960 - loss: 0.0210 - precision: 0.9960 - recall: 0.9961\nEpoch 71: val_loss did not improve from 0.01111\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9960 - auc: 0.9999 - f1_score: 0.9960 - loss: 0.0210 - precision: 0.9960 - recall: 0.9961 - val_accuracy: 0.7883 - val_auc: 0.8020 - val_f1_score: 0.8077 - val_loss: 1.8819 - val_precision: 0.7350 - val_recall: 0.8963 - learning_rate: 1.0000e-04\nEpoch 72/500\n\nEpoch 72: val_loss improved from 0.01111 to 0.01059, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0106 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 73/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9977 - auc: 1.0000 - f1_score: 0.9977 - loss: 0.0167 - precision: 0.9968 - recall: 0.9986\nEpoch 73: val_loss did not improve from 0.01059\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9977 - auc: 1.0000 - f1_score: 0.9977 - loss: 0.0166 - precision: 0.9969 - recall: 0.9986 - val_accuracy: 0.7349 - val_auc: 0.7686 - val_f1_score: 0.7325 - val_loss: 2.4802 - val_precision: 0.7332 - val_recall: 0.7317 - learning_rate: 1.0000e-04\nEpoch 74/500\n\nEpoch 74: val_loss improved from 0.01059 to 0.00878, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0088 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 75/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9996 - auc: 1.0000 - f1_score: 0.9996 - loss: 0.0090 - precision: 0.9995 - recall: 0.9996\nEpoch 75: val_loss did not improve from 0.00878\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9996 - auc: 1.0000 - f1_score: 0.9996 - loss: 0.0090 - precision: 0.9995 - recall: 0.9996 - val_accuracy: 0.7399 - val_auc: 0.7614 - val_f1_score: 0.7440 - val_loss: 3.0935 - val_precision: 0.7267 - val_recall: 0.7622 - learning_rate: 1.0000e-04\nEpoch 76/500\n\nEpoch 76: val_loss improved from 0.00878 to 0.00754, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0075 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 77/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0075 - precision: 1.0000 - recall: 1.0000\nEpoch 77: val_loss did not improve from 0.00754\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0075 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7097 - val_auc: 0.7429 - val_f1_score: 0.6994 - val_loss: 3.0499 - val_precision: 0.7189 - val_recall: 0.6809 - learning_rate: 1.0000e-04\nEpoch 78/500\n\nEpoch 78: val_loss improved from 0.00754 to 0.00657, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0066 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 79/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9987 - auc: 1.0000 - f1_score: 0.9987 - loss: 0.0090 - precision: 0.9989 - recall: 0.9985\nEpoch 79: val_loss did not improve from 0.00657\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 352ms/step - accuracy: 0.9987 - auc: 1.0000 - f1_score: 0.9987 - loss: 0.0090 - precision: 0.9989 - recall: 0.9985 - val_accuracy: 0.7752 - val_auc: 0.8000 - val_f1_score: 0.7829 - val_loss: 2.3226 - val_precision: 0.7514 - val_recall: 0.8171 - learning_rate: 1.0000e-04\nEpoch 80/500\n\nEpoch 80: val_loss did not improve from 0.00657\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 568us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0073 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 81/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0074 - precision: 1.0000 - recall: 1.0000\nEpoch 81: val_loss did not improve from 0.00657\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 352ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0074 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7762 - val_auc: 0.7850 - val_f1_score: 0.7857 - val_loss: 2.8912 - val_precision: 0.7482 - val_recall: 0.8272 - learning_rate: 1.0000e-04\nEpoch 82/500\n\nEpoch 82: val_loss improved from 0.00657 to 0.00560, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0056 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 83/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9972 - auc: 0.9998 - f1_score: 0.9972 - loss: 0.0134 - precision: 0.9976 - recall: 0.9969\nEpoch 83: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9972 - auc: 0.9998 - f1_score: 0.9972 - loss: 0.0135 - precision: 0.9976 - recall: 0.9969 - val_accuracy: 0.8054 - val_auc: 0.8284 - val_f1_score: 0.8228 - val_loss: 3.0198 - val_precision: 0.7504 - val_recall: 0.9106 - learning_rate: 1.0000e-04\nEpoch 84/500\n\nEpoch 84: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 542us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0073 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 85/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9953 - auc: 0.9997 - f1_score: 0.9953 - loss: 0.0239 - precision: 0.9958 - recall: 0.9948\nEpoch 85: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9953 - auc: 0.9997 - f1_score: 0.9953 - loss: 0.0239 - precision: 0.9958 - recall: 0.9948 - val_accuracy: 0.7681 - val_auc: 0.8225 - val_f1_score: 0.7732 - val_loss: 1.3929 - val_precision: 0.7510 - val_recall: 0.7967 - learning_rate: 1.0000e-04\nEpoch 86/500\n\nEpoch 86: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 571us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0244 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 87/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9975 - auc: 0.9998 - f1_score: 0.9975 - loss: 0.0163 - precision: 0.9978 - recall: 0.9973\nEpoch 87: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9975 - auc: 0.9998 - f1_score: 0.9975 - loss: 0.0163 - precision: 0.9977 - recall: 0.9973 - val_accuracy: 0.7520 - val_auc: 0.7820 - val_f1_score: 0.7540 - val_loss: 2.2060 - val_precision: 0.7421 - val_recall: 0.7663 - learning_rate: 1.0000e-04\nEpoch 88/500\n\nEpoch 88: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 561us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0086 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 89/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9944 - auc: 0.9996 - f1_score: 0.9945 - loss: 0.0208 - precision: 0.9967 - recall: 0.9922\nEpoch 89: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9944 - auc: 0.9996 - f1_score: 0.9945 - loss: 0.0208 - precision: 0.9967 - recall: 0.9922 - val_accuracy: 0.6270 - val_auc: 0.6844 - val_f1_score: 0.5757 - val_loss: 3.1219 - val_precision: 0.6605 - val_recall: 0.5102 - learning_rate: 1.0000e-04\nEpoch 90/500\n\nEpoch 90: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 586us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.1487 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 91/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 325ms/step - accuracy: 0.9990 - auc: 1.0000 - f1_score: 0.9991 - loss: 0.0115 - precision: 0.9994 - recall: 0.9988\nEpoch 91: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 359ms/step - accuracy: 0.9990 - auc: 1.0000 - f1_score: 0.9991 - loss: 0.0115 - precision: 0.9994 - recall: 0.9988 - val_accuracy: 0.7359 - val_auc: 0.7617 - val_f1_score: 0.7337 - val_loss: 3.3523 - val_precision: 0.7337 - val_recall: 0.7337 - learning_rate: 1.0000e-04\nEpoch 92/500\n\nEpoch 92: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 556us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0065 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 93/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322ms/step - accuracy: 0.9968 - auc: 0.9997 - f1_score: 0.9968 - loss: 0.0177 - precision: 0.9965 - recall: 0.9970\nEpoch 93: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 356ms/step - accuracy: 0.9968 - auc: 0.9997 - f1_score: 0.9968 - loss: 0.0177 - precision: 0.9965 - recall: 0.9970 - val_accuracy: 0.7550 - val_auc: 0.7736 - val_f1_score: 0.7577 - val_loss: 2.2426 - val_precision: 0.7436 - val_recall: 0.7724 - learning_rate: 1.0000e-04\nEpoch 94/500\n\nEpoch 94: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 565us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0086 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 95/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324ms/step - accuracy: 0.9998 - auc: 1.0000 - f1_score: 0.9998 - loss: 0.0079 - precision: 1.0000 - recall: 0.9996\nEpoch 95: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 358ms/step - accuracy: 0.9998 - auc: 1.0000 - f1_score: 0.9998 - loss: 0.0079 - precision: 1.0000 - recall: 0.9996 - val_accuracy: 0.6482 - val_auc: 0.7096 - val_f1_score: 0.6118 - val_loss: 3.3355 - val_precision: 0.6757 - val_recall: 0.5589 - learning_rate: 1.0000e-04\nEpoch 96/500\n\nEpoch 96: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 551us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.6250 - val_auc: 0.0000e+00 - val_f1_score: 0.7692 - val_loss: 0.6877 - val_precision: 1.0000 - val_recall: 0.6250 - learning_rate: 1.0000e-04\nEpoch 97/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9990 - auc: 1.0000 - f1_score: 0.9990 - loss: 0.0079 - precision: 0.9989 - recall: 0.9992\nEpoch 97: val_loss did not improve from 0.00560\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9990 - auc: 1.0000 - f1_score: 0.9990 - loss: 0.0079 - precision: 0.9989 - recall: 0.9992 - val_accuracy: 0.7581 - val_auc: 0.7820 - val_f1_score: 0.7614 - val_loss: 2.6123 - val_precision: 0.7451 - val_recall: 0.7785 - learning_rate: 1.0000e-04\nEpoch 98/500\n\nEpoch 98: val_loss improved from 0.00560 to 0.00489, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0049 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 99/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0048 - precision: 1.0000 - recall: 1.0000\nEpoch 99: val_loss did not improve from 0.00489\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0048 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7298 - val_auc: 0.7588 - val_f1_score: 0.7260 - val_loss: 2.9729 - val_precision: 0.7305 - val_recall: 0.7215 - learning_rate: 1.0000e-04\nEpoch 100/500\n\nEpoch 100: val_loss improved from 0.00489 to 0.00410, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0041 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 101/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000\nEpoch 101: val_loss did not improve from 0.00410\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7218 - val_auc: 0.7475 - val_f1_score: 0.7160 - val_loss: 3.2879 - val_precision: 0.7250 - val_recall: 0.7073 - learning_rate: 1.0000e-04\nEpoch 102/500\n\nEpoch 102: val_loss improved from 0.00410 to 0.00352, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0035 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 103/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0035 - precision: 1.0000 - recall: 1.0000\nEpoch 103: val_loss did not improve from 0.00352\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0035 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7188 - val_auc: 0.7439 - val_f1_score: 0.7115 - val_loss: 3.2302 - val_precision: 0.7242 - val_recall: 0.6992 - learning_rate: 1.0000e-04\nEpoch 104/500\n\nEpoch 104: val_loss improved from 0.00352 to 0.00308, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0031 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 105/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0030 - precision: 1.0000 - recall: 1.0000\nEpoch 105: val_loss did not improve from 0.00308\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0030 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7863 - val_auc: 0.8038 - val_f1_score: 0.7973 - val_loss: 3.3011 - val_precision: 0.7527 - val_recall: 0.8476 - learning_rate: 1.0000e-04\nEpoch 106/500\n\nEpoch 106: val_loss improved from 0.00308 to 0.00266, saving model to best_model_(VGG16).keras\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0027 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 107/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 0.9992 - auc: 1.0000 - f1_score: 0.9992 - loss: 0.0055 - precision: 0.9991 - recall: 0.9992\nEpoch 107: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9992 - auc: 1.0000 - f1_score: 0.9991 - loss: 0.0056 - precision: 0.9991 - recall: 0.9992 - val_accuracy: 0.7621 - val_auc: 0.8056 - val_f1_score: 0.7659 - val_loss: 2.0975 - val_precision: 0.7481 - val_recall: 0.7846 - learning_rate: 1.0000e-04\nEpoch 108/500\n\nEpoch 108: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 566us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0061 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 109/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 319ms/step - accuracy: 0.9860 - auc: 0.9975 - f1_score: 0.9860 - loss: 0.0535 - precision: 0.9859 - recall: 0.9860\nEpoch 109: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9861 - auc: 0.9975 - f1_score: 0.9860 - loss: 0.0534 - precision: 0.9859 - recall: 0.9861 - val_accuracy: 0.7681 - val_auc: 0.8001 - val_f1_score: 0.7810 - val_loss: 2.5156 - val_precision: 0.7348 - val_recall: 0.8333 - learning_rate: 1.0000e-04\nEpoch 110/500\n\nEpoch 110: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 561us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0089 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 111/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9873 - auc: 0.9978 - f1_score: 0.9874 - loss: 0.0510 - precision: 0.9852 - recall: 0.9899\nEpoch 111: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 352ms/step - accuracy: 0.9874 - auc: 0.9978 - f1_score: 0.9875 - loss: 0.0508 - precision: 0.9853 - recall: 0.9899 - val_accuracy: 0.6139 - val_auc: 0.6885 - val_f1_score: 0.5435 - val_loss: 3.0532 - val_precision: 0.6571 - val_recall: 0.4634 - learning_rate: 1.0000e-04\nEpoch 112/500\n\nEpoch 112: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 528us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 0.8750 - val_auc: 0.0000e+00 - val_f1_score: 0.9333 - val_loss: 0.3087 - val_precision: 1.0000 - val_recall: 0.8750 - learning_rate: 1.0000e-04\nEpoch 113/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9978 - auc: 0.9994 - f1_score: 0.9979 - loss: 0.0164 - precision: 0.9984 - recall: 0.9973\nEpoch 113: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 352ms/step - accuracy: 0.9978 - auc: 0.9995 - f1_score: 0.9979 - loss: 0.0164 - precision: 0.9984 - recall: 0.9973 - val_accuracy: 0.7641 - val_auc: 0.7824 - val_f1_score: 0.7728 - val_loss: 2.3575 - val_precision: 0.7398 - val_recall: 0.8089 - learning_rate: 1.0000e-04\nEpoch 114/500\n\nEpoch 114: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 595us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0077 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 115/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9994 - auc: 1.0000 - f1_score: 0.9994 - loss: 0.0082 - precision: 0.9988 - recall: 1.0000\nEpoch 115: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 352ms/step - accuracy: 0.9994 - auc: 1.0000 - f1_score: 0.9994 - loss: 0.0082 - precision: 0.9988 - recall: 1.0000 - val_accuracy: 0.7399 - val_auc: 0.7604 - val_f1_score: 0.7410 - val_loss: 3.6358 - val_precision: 0.7321 - val_recall: 0.7500 - learning_rate: 1.0000e-04\nEpoch 116/500\n\nEpoch 116: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 577us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0059 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 117/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 0.9992 - auc: 1.0000 - f1_score: 0.9992 - loss: 0.0087 - precision: 0.9993 - recall: 0.9992\nEpoch 117: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 353ms/step - accuracy: 0.9992 - auc: 1.0000 - f1_score: 0.9992 - loss: 0.0087 - precision: 0.9993 - recall: 0.9992 - val_accuracy: 0.7036 - val_auc: 0.8012 - val_f1_score: 0.6825 - val_loss: 1.7148 - val_precision: 0.7281 - val_recall: 0.6423 - learning_rate: 1.0000e-04\nEpoch 118/500\n\nEpoch 118: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 585us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0114 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 119/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9931 - auc: 0.9996 - f1_score: 0.9931 - loss: 0.0280 - precision: 0.9945 - recall: 0.9917\nEpoch 119: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 0.9931 - auc: 0.9996 - f1_score: 0.9931 - loss: 0.0280 - precision: 0.9945 - recall: 0.9917 - val_accuracy: 0.7218 - val_auc: 0.7428 - val_f1_score: 0.7160 - val_loss: 3.5301 - val_precision: 0.7250 - val_recall: 0.7073 - learning_rate: 1.0000e-04\nEpoch 120/500\n\nEpoch 120: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 565us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0084 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 121/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 0.9977 - auc: 1.0000 - f1_score: 0.9978 - loss: 0.0123 - precision: 0.9972 - recall: 0.9984\nEpoch 121: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 355ms/step - accuracy: 0.9978 - auc: 1.0000 - f1_score: 0.9978 - loss: 0.0123 - precision: 0.9973 - recall: 0.9984 - val_accuracy: 0.6673 - val_auc: 0.7160 - val_f1_score: 0.6405 - val_loss: 3.0827 - val_precision: 0.6901 - val_recall: 0.5976 - learning_rate: 1.0000e-04\nEpoch 122/500\n\nEpoch 122: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 529us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0078 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 123/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0076 - precision: 1.0000 - recall: 1.0000\nEpoch 123: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0076 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7167 - val_auc: 0.7450 - val_f1_score: 0.7164 - val_loss: 4.2395 - val_precision: 0.7114 - val_recall: 0.7215 - learning_rate: 1.0000e-04\nEpoch 124/500\n\nEpoch 124: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 556us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0056 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 125/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0056 - precision: 1.0000 - recall: 1.0000\nEpoch 125: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 349ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0056 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.6986 - val_auc: 0.7222 - val_f1_score: 0.6869 - val_loss: 4.3463 - val_precision: 0.7084 - val_recall: 0.6667 - learning_rate: 1.0000e-04\nEpoch 126/500\n\nEpoch 126: val_loss did not improve from 0.00266\n\nEpoch 126: ReduceLROnPlateau reducing learning rate to 1.9999999494757503e-05.\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 540us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0047 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 127/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0054 - precision: 1.0000 - recall: 1.0000\nEpoch 127: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0054 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.6996 - val_auc: 0.7237 - val_f1_score: 0.6870 - val_loss: 4.1160 - val_precision: 0.7109 - val_recall: 0.6646 - learning_rate: 2.0000e-05\nEpoch 128/500\n\nEpoch 128: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 574us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0046 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 129/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 316ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0046 - precision: 1.0000 - recall: 1.0000\nEpoch 129: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 350ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0046 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7127 - val_auc: 0.7321 - val_f1_score: 0.7047 - val_loss: 4.1110 - val_precision: 0.7188 - val_recall: 0.6911 - learning_rate: 2.0000e-05\nEpoch 130/500\n\nEpoch 130: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 530us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0044 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 131/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0044 - precision: 1.0000 - recall: 1.0000\nEpoch 131: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0044 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7188 - val_auc: 0.7413 - val_f1_score: 0.7133 - val_loss: 4.1386 - val_precision: 0.7214 - val_recall: 0.7053 - learning_rate: 2.0000e-05\nEpoch 132/500\n\nEpoch 132: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 552us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0042 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 133/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 316ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0045 - precision: 1.0000 - recall: 1.0000\nEpoch 133: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 350ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0045 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7067 - val_auc: 0.7226 - val_f1_score: 0.6972 - val_loss: 4.0912 - val_precision: 0.7143 - val_recall: 0.6809 - learning_rate: 2.0000e-05\nEpoch 134/500\n\nEpoch 134: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 560us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0041 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 135/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0041 - precision: 1.0000 - recall: 1.0000\nEpoch 135: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 353ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0041 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7087 - val_auc: 0.7286 - val_f1_score: 0.6999 - val_loss: 4.0583 - val_precision: 0.7155 - val_recall: 0.6850 - learning_rate: 2.0000e-05\nEpoch 136/500\n\nEpoch 136: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 554us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0039 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 137/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 316ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000\nEpoch 137: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 350ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7077 - val_auc: 0.7276 - val_f1_score: 0.6985 - val_loss: 4.0423 - val_precision: 0.7149 - val_recall: 0.6829 - learning_rate: 2.0000e-05\nEpoch 138/500\n\nEpoch 138: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 523us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0038 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 139/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000\nEpoch 139: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 354ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0040 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.6694 - val_auc: 0.6987 - val_f1_score: 0.6435 - val_loss: 3.9430 - val_precision: 0.6916 - val_recall: 0.6016 - learning_rate: 2.0000e-05\nEpoch 140/500\n\nEpoch 140: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 558us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0037 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 141/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 317ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0044 - precision: 1.0000 - recall: 0.9998\nEpoch 141: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 351ms/step - accuracy: 0.9999 - auc: 1.0000 - f1_score: 0.9999 - loss: 0.0044 - precision: 1.0000 - recall: 0.9998 - val_accuracy: 0.7117 - val_auc: 0.7492 - val_f1_score: 0.7027 - val_loss: 3.1417 - val_precision: 0.7191 - val_recall: 0.6870 - learning_rate: 2.0000e-05\nEpoch 142/500\n\nEpoch 142: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 642us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0035 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 143/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 315ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0036 - precision: 1.0000 - recall: 1.0000\nEpoch 143: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 349ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0036 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7067 - val_auc: 0.7349 - val_f1_score: 0.6959 - val_loss: 3.2618 - val_precision: 0.7161 - val_recall: 0.6768 - learning_rate: 2.0000e-05\nEpoch 144/500\n\nEpoch 144: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 548us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0034 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 145/500\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0037 - precision: 1.0000 - recall: 1.0000\nEpoch 145: val_loss did not improve from 0.00266\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 381ms/step - accuracy: 1.0000 - auc: 1.0000 - f1_score: 1.0000 - loss: 0.0037 - precision: 1.0000 - recall: 1.0000 - val_accuracy: 0.7026 - val_auc: 0.7225 - val_f1_score: 0.6905 - val_loss: 3.4866 - val_precision: 0.7137 - val_recall: 0.6687 - learning_rate: 2.0000e-05\nEpoch 146/500\n\nEpoch 146: val_loss did not improve from 0.00266\n\nEpoch 146: ReduceLROnPlateau reducing learning rate to 3.999999898951501e-06.\n\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 564us/step - accuracy: 0.0000e+00 - auc: 0.0000e+00 - f1_score: 0.0000e+00 - loss: 0.0000e+00 - precision: 0.0000e+00 - recall: 0.0000e+00 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 1.0000 - val_loss: 0.0033 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 2.0000e-05\nEpoch 146: early stopping\nRestoring model weights from the end of the best epoch: 106.\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate the model on the test dataset\nresult = model.evaluate(test_dataset, return_dict=True)\nmetrics = ['accuracy', 'loss', 'precision', 'recall']\n\nprint(\"\\n\\nModel Evaluation Results:\")\nprint(\"-------------------------\")\nfor metric in metrics:\n    print(f\"{metric.capitalize():<10} : {result[metric]:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-11-02T05:03:40.008932Z","iopub.execute_input":"2024-11-02T05:03:40.009296Z","iopub.status.idle":"2024-11-02T05:03:41.474348Z","shell.execute_reply.started":"2024-11-02T05:03:40.009268Z","shell.execute_reply":"2024-11-02T05:03:41.473346Z"},"trusted":true},"outputs":[{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 384ms/step - accuracy: 0.6244 - auc: 0.5573 - f1_score: 0.4236 - loss: 3.7307 - precision: 0.3695 - recall: 0.5861          \n\n\nModel Evaluation Results:\n-------------------------\nAccuracy   : 0.6885\nLoss       : 3.0481\nPrecision  : 0.6533\nRecall     : 0.8033\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730523821.358925     199 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"import numpy as np\n\n\n# Step 1: Extract true labels (y_true)\ny_true = test_dataset.classes  # True labels from the test generator\nclass_indices = list(test_dataset.class_indices.keys())  # Get class names\n\n# Step 2: Predict probabilities for the positive class\ny_pred_proba = model.predict(test_dataset, verbose=1)\n\n# Step 3: Convert probabilities to binary class predictions (y_pred)\n# Here we assume a binary classification problem; use a threshold of 0.5\ny_pred = (y_pred_proba >= 0.50).astype(int).flatten()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:03:55.692493Z","iopub.execute_input":"2024-11-02T05:03:55.693326Z","iopub.status.idle":"2024-11-02T05:03:57.479421Z","shell.execute_reply.started":"2024-11-02T05:03:55.693288Z","shell.execute_reply":"2024-11-02T05:03:57.478494Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/4\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 153ms/step","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730523836.486577     199 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 294ms/step\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730523837.366325     199 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import precision_recall_curve, roc_curve, auc, confusion_matrix, f1_score, precision_score, recall_score\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:03:57.482326Z","iopub.execute_input":"2024-11-02T05:03:57.482664Z","iopub.status.idle":"2024-11-02T05:03:57.487356Z","shell.execute_reply.started":"2024-11-02T05:03:57.482613Z","shell.execute_reply":"2024-11-02T05:03:57.486402Z"}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"**Plot loss**","metadata":{}},{"cell_type":"code","source":"def plot_loss_accuracy(history):\n    epochs = range(1, len(history.history['loss']) + 1)\n    \n    # # Loss\n    plt.figure(figsize=(14, 6))\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs, history.history['loss'], 'bo-', label='Training Loss')\n    plt.plot(epochs, history.history['val_loss'], 'ro-', label='Validation Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n\n    # Accuracy\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs, history.history['accuracy'], 'bo-', label='Training Accuracy')\n    plt.plot(epochs, history.history['val_accuracy'], 'ro-', label='Validation Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n    \n    plt.savefig('/kaggle/working/loss and accuracy.png', dpi=300, bbox_inches='tight')\n\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:00.429697Z","iopub.execute_input":"2024-11-02T05:04:00.430044Z","iopub.status.idle":"2024-11-02T05:04:00.438411Z","shell.execute_reply.started":"2024-11-02T05:04:00.430017Z","shell.execute_reply":"2024-11-02T05:04:00.437439Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"plot_loss_accuracy(history)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:02.342540Z","iopub.execute_input":"2024-11-02T05:04:02.343152Z","iopub.status.idle":"2024-11-02T05:04:03.924126Z","shell.execute_reply.started":"2024-11-02T05:04:02.343121Z","shell.execute_reply":"2024-11-02T05:04:03.923195Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":35},{"cell_type":"markdown","source":"**Precision-Recall Curve**","metadata":{}},{"cell_type":"code","source":"def plot_precision_recall_curve(y_true, y_pred_proba):\n    precision, recall, thresholds = precision_recall_curve(y_true, y_pred_proba)\n    plt.figure(figsize=(8, 6))\n    plt.plot(recall, precision, marker='.', color='b')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title('Precision-Recall Curve')\n    plt.savefig('/kaggle/working/precision and recall.png', dpi=300, bbox_inches='tight')\n\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:03.925524Z","iopub.execute_input":"2024-11-02T05:04:03.925834Z","iopub.status.idle":"2024-11-02T05:04:03.931495Z","shell.execute_reply.started":"2024-11-02T05:04:03.925809Z","shell.execute_reply":"2024-11-02T05:04:03.930613Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"plot_precision_recall_curve(y_true, y_pred_proba)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:04.008139Z","iopub.execute_input":"2024-11-02T05:04:04.008411Z","iopub.status.idle":"2024-11-02T05:04:04.722030Z","shell.execute_reply.started":"2024-11-02T05:04:04.008387Z","shell.execute_reply":"2024-11-02T05:04:04.721159Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":37},{"cell_type":"markdown","source":"**ROC curve**","metadata":{}},{"cell_type":"code","source":"def plot_roc_curve(y_true, y_pred_proba):\n    fpr, tpr, thresholds = roc_curve(y_true, y_pred_proba)\n    auc_score = auc(fpr, tpr)\n    plt.figure(figsize=(8, 6))\n    plt.plot(fpr, tpr, marker='.', label=f'ROC Curve (AUC = {auc_score:.2f})', color='b')\n    plt.plot([0, 1], [0, 1], linestyle='--', color='gray')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend()\n    plt.savefig('/kaggle/working/roc_curve.png', dpi=300, bbox_inches='tight')\n    plt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:05.271694Z","iopub.execute_input":"2024-11-02T05:04:05.272020Z","iopub.status.idle":"2024-11-02T05:04:05.281030Z","shell.execute_reply.started":"2024-11-02T05:04:05.271996Z","shell.execute_reply":"2024-11-02T05:04:05.280226Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"plot_roc_curve(y_true, y_pred_proba)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:06.153414Z","iopub.execute_input":"2024-11-02T05:04:06.153804Z","iopub.status.idle":"2024-11-02T05:04:06.933915Z","shell.execute_reply.started":"2024-11-02T05:04:06.153773Z","shell.execute_reply":"2024-11-02T05:04:06.933032Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":39},{"cell_type":"markdown","source":"**Confusion Matrix**","metadata":{}},{"cell_type":"code","source":"def plot_confusion_matrix(y_true, y_pred, class_names):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.title('Confusion Matrix')\n    plt.savefig('/kaggle/working/confusion_matrix.png', dpi=300, bbox_inches='tight')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:08.901779Z","iopub.execute_input":"2024-11-02T05:04:08.902572Z","iopub.status.idle":"2024-11-02T05:04:08.908195Z","shell.execute_reply.started":"2024-11-02T05:04:08.902541Z","shell.execute_reply":"2024-11-02T05:04:08.907300Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"plot_confusion_matrix(y_true, y_pred, ['ad', 'cn'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T05:04:53.995324Z","iopub.execute_input":"2024-11-02T05:04:53.995725Z","iopub.status.idle":"2024-11-02T05:04:54.706688Z","shell.execute_reply.started":"2024-11-02T05:04:53.995684Z","shell.execute_reply":"2024-11-02T05:04:54.705571Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"# **VGG16 for binary**","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef create_vgg16_binary(input_shape=(224, 224, 3)):\n    model = models.Sequential()\n    \n    # Block 1\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=input_shape))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D((2, 2)))\n\n    # Block 2\n    model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D((2, 2)))\n\n    # Block 3\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D((2, 2)))\n\n    # Block 4\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D((2, 2)))\n\n    # Block 5\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same'))\n    model.add(layers.MaxPooling2D((2, 2)))\n\n    # Fully connected layers\n    model.add(layers.Flatten())\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    \n    # Output layer for binary classification\n    model.add(layers.Dense(1, activation='sigmoid'))  # Single output for binary classification\n\n    return model\n\n# Create the VGG16 model for binary classification\nvgg16_model_binary = create_vgg16_binary(input_shape=(224, 224, 3))\n\n# Compile the model\nvgg16_model_binary.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Summary of the model\nvgg16_model_binary.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:01:24.037874Z","iopub.execute_input":"2024-11-01T18:01:24.038257Z","iopub.status.idle":"2024-11-01T18:01:24.393159Z","shell.execute_reply.started":"2024-11-01T18:01:24.038226Z","shell.execute_reply":"2024-11-01T18:01:24.392209Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_13 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │         \u001b[38;5;34m1,792\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_14 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m36,928\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_5 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_15 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_16 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │       \u001b[38;5;34m147,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_6 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_17 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_18 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_19 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_7 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_20 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m1,180,160\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_21 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_22 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_8 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_23 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_24 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_25 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_9 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_6 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_26 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │   \u001b[38;5;34m102,764,544\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_27 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m16,781,312\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_28 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │         \u001b[38;5;34m4,097\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,180,160</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_23 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_24 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_25 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_26 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │   <span style=\"color: #00af00; text-decoration-color: #00af00\">102,764,544</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_27 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">16,781,312</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_28 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,097</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m134,264,641\u001b[0m (512.18 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">134,264,641</span> (512.18 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m134,264,641\u001b[0m (512.18 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">134,264,641</span> (512.18 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":114},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=30, restore_best_weights=True,verbose=1)\nmodel_checkpoint = ModelCheckpoint('best_model_(VGG16-not-pretrain).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=15, min_lr=1e-8, verbose=1)\n\n# Train the model\nhistory = vgg16_model_binary.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:01:24.463396Z","iopub.execute_input":"2024-11-01T18:01:24.463691Z","iopub.status.idle":"2024-11-01T18:15:24.655864Z","shell.execute_reply.started":"2024-11-01T18:01:24.463665Z","shell.execute_reply":"2024-11-01T18:15:24.655051Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/500\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730484097.399751     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m11/62\u001b[0m \u001b[32m━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m21s\u001b[0m 419ms/step - accuracy: 0.5055 - loss: 316.2213","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730484107.186986     149 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 504ms/step - accuracy: 0.4949 - loss: 104.5928","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730484129.486966     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1: val_loss improved from inf to 0.69245, saving model to best_model_(VGG16-not-pretrain).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 662ms/step - accuracy: 0.4950 - loss: 103.3871 - val_accuracy: 0.5208 - val_loss: 0.6924 - learning_rate: 0.0010\nEpoch 2/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m28s\u001b[0m 461ms/step - accuracy: 0.5625 - loss: 0.6923\nEpoch 2: val_loss did not improve from 0.69245\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.5625 - loss: 0.6923 - val_accuracy: 0.0000e+00 - val_loss: 0.7186 - learning_rate: 0.0010\nEpoch 3/500\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730484139.262200     149 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - accuracy: 0.4751 - loss: 0.6942\nEpoch 3: val_loss did not improve from 0.69245\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 434ms/step - accuracy: 0.4753 - loss: 0.6942 - val_accuracy: 0.4792 - val_loss: 0.6933 - learning_rate: 0.0010\nEpoch 4/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 401ms/step - accuracy: 0.4062 - loss: 0.6934\nEpoch 4: val_loss improved from 0.69245 to 0.69000, saving model to best_model_(VGG16-not-pretrain).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 119ms/step - accuracy: 0.4062 - loss: 0.6934 - val_accuracy: 1.0000 - val_loss: 0.6900 - learning_rate: 0.0010\nEpoch 5/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.4924 - loss: 0.6933\nEpoch 5: val_loss did not improve from 0.69000\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 431ms/step - accuracy: 0.4924 - loss: 0.6933 - val_accuracy: 0.5208 - val_loss: 0.6929 - learning_rate: 0.0010\nEpoch 6/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 403ms/step - accuracy: 0.5312 - loss: 0.6910\nEpoch 6: val_loss did not improve from 0.69000\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6910 - val_accuracy: 0.0000e+00 - val_loss: 0.6966 - learning_rate: 0.0010\nEpoch 7/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - accuracy: 0.5125 - loss: 0.6933\nEpoch 7: val_loss did not improve from 0.69000\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 432ms/step - accuracy: 0.5123 - loss: 0.6933 - val_accuracy: 0.5208 - val_loss: 0.6927 - learning_rate: 0.0010\nEpoch 8/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 397ms/step - accuracy: 0.5000 - loss: 0.6933\nEpoch 8: val_loss did not improve from 0.69000\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5000 - loss: 0.6933 - val_accuracy: 0.0000e+00 - val_loss: 0.7067 - learning_rate: 0.0010\nEpoch 9/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - accuracy: 0.5022 - loss: 0.6940\nEpoch 9: val_loss did not improve from 0.69000\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 429ms/step - accuracy: 0.5020 - loss: 0.6940 - val_accuracy: 0.4792 - val_loss: 0.6933 - learning_rate: 0.0010\nEpoch 10/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 400ms/step - accuracy: 0.5625 - loss: 0.6920\nEpoch 10: val_loss improved from 0.69000 to 0.68893, saving model to best_model_(VGG16-not-pretrain).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 110ms/step - accuracy: 0.5625 - loss: 0.6920 - val_accuracy: 1.0000 - val_loss: 0.6889 - learning_rate: 0.0010\nEpoch 11/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - accuracy: 0.5113 - loss: 0.6931\nEpoch 11: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 434ms/step - accuracy: 0.5111 - loss: 0.6931 - val_accuracy: 0.4792 - val_loss: 0.6933 - learning_rate: 0.0010\nEpoch 12/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 403ms/step - accuracy: 0.5938 - loss: 0.6921\nEpoch 12: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - loss: 0.6921 - val_accuracy: 1.0000 - val_loss: 0.6910 - learning_rate: 0.0010\nEpoch 13/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - accuracy: 0.5161 - loss: 0.6931\nEpoch 13: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 432ms/step - accuracy: 0.5158 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 0.0010\nEpoch 14/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 395ms/step - accuracy: 0.5625 - loss: 0.6930\nEpoch 14: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5625 - loss: 0.6930 - val_accuracy: 0.0000e+00 - val_loss: 0.6935 - learning_rate: 0.0010\nEpoch 15/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - accuracy: 0.5133 - loss: 0.6930\nEpoch 15: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 429ms/step - accuracy: 0.5131 - loss: 0.6930 - val_accuracy: 0.5208 - val_loss: 0.6928 - learning_rate: 0.0010\nEpoch 16/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 397ms/step - accuracy: 0.5625 - loss: 0.6906\nEpoch 16: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5625 - loss: 0.6906 - val_accuracy: 0.0000e+00 - val_loss: 0.7017 - learning_rate: 0.0010\nEpoch 17/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - accuracy: 0.4852 - loss: 0.6935\nEpoch 17: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 432ms/step - accuracy: 0.4853 - loss: 0.6935 - val_accuracy: 0.5208 - val_loss: 0.6927 - learning_rate: 0.0010\nEpoch 18/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 400ms/step - accuracy: 0.4062 - loss: 0.6968\nEpoch 18: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4062 - loss: 0.6968 - val_accuracy: 0.0000e+00 - val_loss: 0.7050 - learning_rate: 0.0010\nEpoch 19/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - accuracy: 0.4810 - loss: 0.6939\nEpoch 19: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 431ms/step - accuracy: 0.4810 - loss: 0.6939 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 0.0010\nEpoch 20/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 397ms/step - accuracy: 0.5312 - loss: 0.6916\nEpoch 20: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6916 - val_accuracy: 0.0000e+00 - val_loss: 0.6950 - learning_rate: 0.0010\nEpoch 21/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - accuracy: 0.5050 - loss: 0.6929\nEpoch 21: val_loss did not improve from 0.68893\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 433ms/step - accuracy: 0.5048 - loss: 0.6929 - val_accuracy: 0.4792 - val_loss: 0.6936 - learning_rate: 0.0010\nEpoch 22/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 399ms/step - accuracy: 0.3438 - loss: 0.6973\nEpoch 22: val_loss improved from 0.68893 to 0.68551, saving model to best_model_(VGG16-not-pretrain).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 111ms/step - accuracy: 0.3438 - loss: 0.6973 - val_accuracy: 1.0000 - val_loss: 0.6855 - learning_rate: 0.0010\nEpoch 23/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - accuracy: 0.4906 - loss: 0.6939\nEpoch 23: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 430ms/step - accuracy: 0.4906 - loss: 0.6939 - val_accuracy: 0.4792 - val_loss: 0.6932 - learning_rate: 0.0010\nEpoch 24/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 404ms/step - accuracy: 0.5312 - loss: 0.6932\nEpoch 24: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6932 - val_accuracy: 1.0000 - val_loss: 0.6908 - learning_rate: 0.0010\nEpoch 25/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.5091 - loss: 0.6931\nEpoch 25: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 431ms/step - accuracy: 0.5089 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6930 - learning_rate: 0.0010\nEpoch 26/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 402ms/step - accuracy: 0.4688 - loss: 0.6929\nEpoch 26: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4688 - loss: 0.6929 - val_accuracy: 0.0000e+00 - val_loss: 0.6965 - learning_rate: 0.0010\nEpoch 27/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - accuracy: 0.5058 - loss: 0.6928\nEpoch 27: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 432ms/step - accuracy: 0.5055 - loss: 0.6928 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 0.0010\nEpoch 28/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 397ms/step - accuracy: 0.4062 - loss: 0.6967\nEpoch 28: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4062 - loss: 0.6967 - val_accuracy: 1.0000 - val_loss: 0.6931 - learning_rate: 0.0010\nEpoch 29/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - accuracy: 0.5003 - loss: 0.6929\nEpoch 29: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 433ms/step - accuracy: 0.5004 - loss: 0.6929 - val_accuracy: 0.4792 - val_loss: 0.6934 - learning_rate: 0.0010\nEpoch 30/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 398ms/step - accuracy: 0.5938 - loss: 0.6906\nEpoch 30: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - loss: 0.6906 - val_accuracy: 1.0000 - val_loss: 0.6889 - learning_rate: 0.0010\nEpoch 31/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.4915 - loss: 0.6933\nEpoch 31: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 431ms/step - accuracy: 0.4915 - loss: 0.6933 - val_accuracy: 0.5208 - val_loss: 0.6929 - learning_rate: 0.0010\nEpoch 32/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 398ms/step - accuracy: 0.3125 - loss: 0.6950\nEpoch 32: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.3125 - loss: 0.6950 - val_accuracy: 0.0000e+00 - val_loss: 0.7003 - learning_rate: 0.0010\nEpoch 33/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 408ms/step - accuracy: 0.5127 - loss: 0.6931\nEpoch 33: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 433ms/step - accuracy: 0.5125 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6929 - learning_rate: 0.0010\nEpoch 34/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 398ms/step - accuracy: 0.4375 - loss: 0.6967\nEpoch 34: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4375 - loss: 0.6967 - val_accuracy: 0.0000e+00 - val_loss: 0.6971 - learning_rate: 0.0010\nEpoch 35/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 405ms/step - accuracy: 0.4948 - loss: 0.6931\nEpoch 35: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 430ms/step - accuracy: 0.4947 - loss: 0.6931 - val_accuracy: 0.4792 - val_loss: 0.6933 - learning_rate: 0.0010\nEpoch 36/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 396ms/step - accuracy: 0.5312 - loss: 0.6922\nEpoch 36: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6922 - val_accuracy: 1.0000 - val_loss: 0.6886 - learning_rate: 0.0010\nEpoch 37/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - accuracy: 0.5147 - loss: 0.6931\nEpoch 37: val_loss did not improve from 0.68551\n\nEpoch 37: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 433ms/step - accuracy: 0.5146 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6930 - learning_rate: 0.0010\nEpoch 38/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 396ms/step - accuracy: 0.5312 - loss: 0.6924\nEpoch 38: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6924 - val_accuracy: 0.0000e+00 - val_loss: 0.6958 - learning_rate: 2.0000e-04\nEpoch 39/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 403ms/step - accuracy: 0.4885 - loss: 0.6935\nEpoch 39: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 428ms/step - accuracy: 0.4884 - loss: 0.6935 - val_accuracy: 0.5208 - val_loss: 0.6929 - learning_rate: 2.0000e-04\nEpoch 40/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 400ms/step - accuracy: 0.4375 - loss: 0.6944\nEpoch 40: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4375 - loss: 0.6944 - val_accuracy: 0.0000e+00 - val_loss: 0.6982 - learning_rate: 2.0000e-04\nEpoch 41/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.4864 - loss: 0.6936\nEpoch 41: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 431ms/step - accuracy: 0.4868 - loss: 0.6936 - val_accuracy: 0.5208 - val_loss: 0.6930 - learning_rate: 2.0000e-04\nEpoch 42/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 400ms/step - accuracy: 0.5938 - loss: 0.6899\nEpoch 42: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - loss: 0.6899 - val_accuracy: 0.0000e+00 - val_loss: 0.6966 - learning_rate: 2.0000e-04\nEpoch 43/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.4772 - loss: 0.6930\nEpoch 43: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 431ms/step - accuracy: 0.4773 - loss: 0.6930 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 2.0000e-04\nEpoch 44/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 395ms/step - accuracy: 0.4688 - loss: 0.6954\nEpoch 44: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4688 - loss: 0.6954 - val_accuracy: 0.0000e+00 - val_loss: 0.6939 - learning_rate: 2.0000e-04\nEpoch 45/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 406ms/step - accuracy: 0.4946 - loss: 0.6930\nEpoch 45: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 430ms/step - accuracy: 0.4945 - loss: 0.6930 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 2.0000e-04\nEpoch 46/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 399ms/step - accuracy: 0.5000 - loss: 0.6933\nEpoch 46: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5000 - loss: 0.6933 - val_accuracy: 0.0000e+00 - val_loss: 0.6948 - learning_rate: 2.0000e-04\nEpoch 47/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 409ms/step - accuracy: 0.5038 - loss: 0.6931\nEpoch 47: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 433ms/step - accuracy: 0.5038 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 2.0000e-04\nEpoch 48/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 397ms/step - accuracy: 0.5938 - loss: 0.6901\nEpoch 48: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - loss: 0.6901 - val_accuracy: 0.0000e+00 - val_loss: 0.6949 - learning_rate: 2.0000e-04\nEpoch 49/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - accuracy: 0.4837 - loss: 0.6931\nEpoch 49: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 429ms/step - accuracy: 0.4838 - loss: 0.6931 - val_accuracy: 0.5208 - val_loss: 0.6931 - learning_rate: 2.0000e-04\nEpoch 50/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 400ms/step - accuracy: 0.5625 - loss: 0.6941\nEpoch 50: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5625 - loss: 0.6941 - val_accuracy: 0.0000e+00 - val_loss: 0.6948 - learning_rate: 2.0000e-04\nEpoch 51/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 407ms/step - accuracy: 0.5118 - loss: 0.6932\nEpoch 51: val_loss did not improve from 0.68551\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 432ms/step - accuracy: 0.5119 - loss: 0.6932 - val_accuracy: 0.5208 - val_loss: 0.6930 - learning_rate: 2.0000e-04\nEpoch 52/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m24s\u001b[0m 399ms/step - accuracy: 0.5312 - loss: 0.6939\nEpoch 52: val_loss did not improve from 0.68551\n\nEpoch 52: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5312 - loss: 0.6939 - val_accuracy: 0.0000e+00 - val_loss: 0.6959 - learning_rate: 2.0000e-04\nEpoch 52: early stopping\nRestoring model weights from the end of the best epoch: 22.\n","output_type":"stream"}],"execution_count":115},{"cell_type":"code","source":"vgg16_model_binary.evaluate(test_dataset, return_dict=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:15:24.657485Z","iopub.execute_input":"2024-11-01T18:15:24.657770Z","iopub.status.idle":"2024-11-01T18:15:25.763940Z","shell.execute_reply.started":"2024-11-01T18:15:24.657746Z","shell.execute_reply":"2024-11-01T18:15:25.762990Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 283ms/step - accuracy: 0.2823 - loss: 0.6965\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730484925.661042     151 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"execution_count":116,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 0.5, 'loss': 0.6931765079498291}"},"metadata":{}}],"execution_count":116},{"cell_type":"code","source":"from tensorflow.keras.layers import Activation\n\n# Load the VGG16 model pre-trained on ImageNet, excluding the top layers\nbase_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Set the last two layers as non-trainable\nfor layer in base_model.layers[:-10]:\n    layer.trainable = False\n\n# Check layer trainable status\nfor layer in base_model.layers:\n    print(layer.name, layer.trainable)\n    \nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(32,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(layers.Activation('relu'))\nmodel.add(Dense(1,activation='sigmoid'))\n\n\n# Compile the model with sparse_categorical_crossentropy\nmodel.compile(optimizer=Adam(learning_rate=0.0001), \n              loss='binary_crossentropy', \n              metrics=METRICS)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:17:35.524928Z","iopub.execute_input":"2024-11-01T18:17:35.525873Z","iopub.status.idle":"2024-11-01T18:17:35.803447Z","shell.execute_reply.started":"2024-11-01T18:17:35.525833Z","shell.execute_reply":"2024-11-01T18:17:35.802448Z"}},"outputs":[{"name":"stdout","text":"input_layer_10 False\nblock1_conv1 False\nblock1_conv2 False\nblock1_pool False\nblock2_conv1 False\nblock2_conv2 False\nblock2_pool False\nblock3_conv1 False\nblock3_conv2 False\nblock3_conv3 True\nblock3_pool True\nblock4_conv1 True\nblock4_conv2 True\nblock4_conv3 True\nblock4_pool True\nblock5_conv1 True\nblock5_conv2 True\nblock5_conv3 True\nblock5_pool True\n","output_type":"stream"}],"execution_count":119},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=30, restore_best_weights=True,verbose=1)\nmodel_checkpoint = ModelCheckpoint('best_model_(VGG16_last_10_layers_unfreeze).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=15, min_lr=1e-8, verbose=1)\n\n# Train the model\nhistory = model.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:17:40.210470Z","iopub.execute_input":"2024-11-01T18:17:40.211096Z","iopub.status.idle":"2024-11-01T18:25:48.202039Z","shell.execute_reply.started":"2024-11-01T18:17:40.211045Z","shell.execute_reply":"2024-11-01T18:25:48.201033Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 453ms/step - accuracy: 0.5524 - auc: 0.5291 - f1_score: 18.6216 - loss: 0.7930 - precision: 0.5343 - recall: 0.7590\nEpoch 1: val_loss improved from inf to 0.70275, saving model to best_model_(VGG16_last_10_layers_unfreeze).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 525ms/step - accuracy: 0.5520 - auc: 0.5288 - f1_score: 18.6237 - loss: 0.7928 - precision: 0.5340 - recall: 0.7589 - val_accuracy: 0.4792 - val_auc: 0.5030 - val_f1_score: 15.6190 - val_loss: 0.7027 - val_precision: 0.4792 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 2/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m13s\u001b[0m 214ms/step - accuracy: 0.4688 - auc: 0.5159 - f1_score: 17.4054 - loss: 0.7997 - precision: 0.4348 - recall: 0.7143\nEpoch 2: val_loss improved from 0.70275 to 0.59770, saving model to best_model_(VGG16_last_10_layers_unfreeze).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.4688 - auc: 0.5159 - f1_score: 17.4054 - loss: 0.7997 - precision: 0.4348 - recall: 0.7143 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 16.0000 - val_loss: 0.5977 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 3/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - accuracy: 0.5033 - auc: 0.4904 - f1_score: 18.6062 - loss: 0.7755 - precision: 0.5015 - recall: 0.7424\nEpoch 3: val_loss did not improve from 0.59770\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 373ms/step - accuracy: 0.5032 - auc: 0.4904 - f1_score: 18.6066 - loss: 0.7754 - precision: 0.5014 - recall: 0.7421 - val_accuracy: 0.4792 - val_auc: 0.4897 - val_f1_score: 15.6190 - val_loss: 0.7212 - val_precision: 0.4792 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 4/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 211ms/step - accuracy: 0.5312 - auc: 0.4805 - f1_score: 18.8718 - loss: 0.8066 - precision: 0.5217 - recall: 0.7500\nEpoch 4: val_loss improved from 0.59770 to 0.51145, saving model to best_model_(VGG16_last_10_layers_unfreeze).keras\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - accuracy: 0.5312 - auc: 0.4805 - f1_score: 18.8718 - loss: 0.8066 - precision: 0.5217 - recall: 0.7500 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 16.0000 - val_loss: 0.5114 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 5/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 346ms/step - accuracy: 0.4945 - auc: 0.5077 - f1_score: 18.4008 - loss: 0.7517 - precision: 0.5022 - recall: 0.6966\nEpoch 5: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 371ms/step - accuracy: 0.4947 - auc: 0.5080 - f1_score: 18.3987 - loss: 0.7516 - precision: 0.5022 - recall: 0.6967 - val_accuracy: 0.4792 - val_auc: 0.4973 - val_f1_score: 15.6190 - val_loss: 0.7192 - val_precision: 0.4792 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 6/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 212ms/step - accuracy: 0.4688 - auc: 0.5314 - f1_score: 19.1795 - loss: 0.7144 - precision: 0.5000 - recall: 0.6471\nEpoch 6: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4688 - auc: 0.5314 - f1_score: 19.1795 - loss: 0.7144 - precision: 0.5000 - recall: 0.6471 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 16.0000 - val_loss: 0.5204 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 7/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 351ms/step - accuracy: 0.4880 - auc: 0.5100 - f1_score: 18.1730 - loss: 0.7403 - precision: 0.4904 - recall: 0.6799\nEpoch 7: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 376ms/step - accuracy: 0.4880 - auc: 0.5098 - f1_score: 18.1727 - loss: 0.7405 - precision: 0.4904 - recall: 0.6798 - val_accuracy: 0.4609 - val_auc: 0.4702 - val_f1_score: 11.5934 - val_loss: 0.6952 - val_precision: 0.4523 - val_recall: 0.5924 - learning_rate: 1.0000e-04\nEpoch 8/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 211ms/step - accuracy: 0.6562 - auc: 0.6052 - f1_score: 19.3846 - loss: 0.6685 - precision: 0.6667 - recall: 0.7778\nEpoch 8: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.6562 - auc: 0.6052 - f1_score: 19.3846 - loss: 0.6685 - precision: 0.6667 - recall: 0.7778 - val_accuracy: 0.6875 - val_auc: 0.0000e+00 - val_f1_score: 13.0370 - val_loss: 0.6763 - val_precision: 1.0000 - val_recall: 0.6875 - learning_rate: 1.0000e-04\nEpoch 9/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 358ms/step - accuracy: 0.5104 - auc: 0.5363 - f1_score: 17.5072 - loss: 0.7302 - precision: 0.5035 - recall: 0.6676\nEpoch 9: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 383ms/step - accuracy: 0.5104 - auc: 0.5362 - f1_score: 17.5103 - loss: 0.7302 - precision: 0.5036 - recall: 0.6675 - val_accuracy: 0.4792 - val_auc: 0.5080 - val_f1_score: 15.6190 - val_loss: 0.6980 - val_precision: 0.4792 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 10/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.5938 - auc: 0.6152 - f1_score: 18.1622 - loss: 0.7161 - precision: 0.5714 - recall: 0.7500\nEpoch 10: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - auc: 0.6152 - f1_score: 18.1622 - loss: 0.7161 - precision: 0.5714 - recall: 0.7500 - val_accuracy: 1.0000 - val_auc: 0.0000e+00 - val_f1_score: 16.0000 - val_loss: 0.6405 - val_precision: 1.0000 - val_recall: 1.0000 - learning_rate: 1.0000e-04\nEpoch 11/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 353ms/step - accuracy: 0.5256 - auc: 0.5298 - f1_score: 17.8025 - loss: 0.7229 - precision: 0.5276 - recall: 0.6707\nEpoch 11: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 379ms/step - accuracy: 0.5254 - auc: 0.5297 - f1_score: 17.8000 - loss: 0.7231 - precision: 0.5273 - recall: 0.6705 - val_accuracy: 0.5208 - val_auc: 0.4215 - val_f1_score: 0.0000e+00 - val_loss: 0.7046 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 12/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 211ms/step - accuracy: 0.4375 - auc: 0.3792 - f1_score: 20.0000 - loss: 0.7896 - precision: 0.5500 - recall: 0.5500\nEpoch 12: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4375 - auc: 0.3792 - f1_score: 20.0000 - loss: 0.7896 - precision: 0.5500 - recall: 0.5500 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 0.9085 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 13/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 351ms/step - accuracy: 0.4963 - auc: 0.5031 - f1_score: 17.4830 - loss: 0.7409 - precision: 0.4910 - recall: 0.6263\nEpoch 13: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 376ms/step - accuracy: 0.4965 - auc: 0.5033 - f1_score: 17.4813 - loss: 0.7408 - precision: 0.4912 - recall: 0.6264 - val_accuracy: 0.5208 - val_auc: 0.4401 - val_f1_score: 0.0000e+00 - val_loss: 0.7291 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 14/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 211ms/step - accuracy: 0.4375 - auc: 0.4246 - f1_score: 18.9474 - loss: 0.7825 - precision: 0.5000 - recall: 0.5556\nEpoch 14: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4375 - auc: 0.4246 - f1_score: 18.9474 - loss: 0.7825 - precision: 0.5000 - recall: 0.5556 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.0617 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 15/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - accuracy: 0.5070 - auc: 0.5383 - f1_score: 17.1542 - loss: 0.7152 - precision: 0.5050 - recall: 0.6028\nEpoch 15: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 372ms/step - accuracy: 0.5072 - auc: 0.5384 - f1_score: 17.1564 - loss: 0.7152 - precision: 0.5052 - recall: 0.6032 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7409 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 16/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 211ms/step - accuracy: 0.4688 - auc: 0.5635 - f1_score: 16.8000 - loss: 0.7422 - precision: 0.4286 - recall: 0.6429\nEpoch 16: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4688 - auc: 0.5635 - f1_score: 16.8000 - loss: 0.7422 - precision: 0.4286 - recall: 0.6429 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1160 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 17/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 350ms/step - accuracy: 0.5293 - auc: 0.5401 - f1_score: 17.5394 - loss: 0.7120 - precision: 0.5445 - recall: 0.6241\nEpoch 17: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 376ms/step - accuracy: 0.5293 - auc: 0.5402 - f1_score: 17.5334 - loss: 0.7120 - precision: 0.5442 - recall: 0.6242 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7512 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 18/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m13s\u001b[0m 213ms/step - accuracy: 0.5938 - auc: 0.5882 - f1_score: 16.3636 - loss: 0.7148 - precision: 0.5556 - recall: 0.6667\nEpoch 18: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - auc: 0.5882 - f1_score: 16.3636 - loss: 0.7148 - precision: 0.5556 - recall: 0.6667 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1566 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 19/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - accuracy: 0.5087 - auc: 0.5282 - f1_score: 16.8270 - loss: 0.7211 - precision: 0.4963 - recall: 0.6004\nEpoch 19: val_loss did not improve from 0.51145\n\nEpoch 19: ReduceLROnPlateau reducing learning rate to 1.9999999494757503e-05.\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 373ms/step - accuracy: 0.5088 - auc: 0.5280 - f1_score: 16.8274 - loss: 0.7212 - precision: 0.4965 - recall: 0.6003 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7555 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 1.0000e-04\nEpoch 20/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 209ms/step - accuracy: 0.4688 - auc: 0.4393 - f1_score: 19.4872 - loss: 0.7543 - precision: 0.5500 - recall: 0.5789\nEpoch 20: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4688 - auc: 0.4393 - f1_score: 19.4872 - loss: 0.7543 - precision: 0.5500 - recall: 0.5789 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1777 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 21/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 346ms/step - accuracy: 0.4959 - auc: 0.5121 - f1_score: 16.7842 - loss: 0.7308 - precision: 0.5038 - recall: 0.5547\nEpoch 21: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 371ms/step - accuracy: 0.4962 - auc: 0.5123 - f1_score: 16.7836 - loss: 0.7307 - precision: 0.5039 - recall: 0.5551 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7525 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 22/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 209ms/step - accuracy: 0.5312 - auc: 0.5655 - f1_score: 16.1212 - loss: 0.7073 - precision: 0.4737 - recall: 0.6429\nEpoch 22: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5312 - auc: 0.5655 - f1_score: 16.1212 - loss: 0.7073 - precision: 0.4737 - recall: 0.6429 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1652 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 23/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347ms/step - accuracy: 0.5056 - auc: 0.5222 - f1_score: 16.8233 - loss: 0.7240 - precision: 0.4981 - recall: 0.5856\nEpoch 23: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 372ms/step - accuracy: 0.5059 - auc: 0.5224 - f1_score: 16.8216 - loss: 0.7238 - precision: 0.4986 - recall: 0.5857 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7562 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 24/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.5000 - auc: 0.6023 - f1_score: 12.8571 - loss: 0.7136 - precision: 0.3333 - recall: 0.6000\nEpoch 24: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5000 - auc: 0.6023 - f1_score: 12.8571 - loss: 0.7136 - precision: 0.3333 - recall: 0.6000 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1774 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 25/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 374ms/step - accuracy: 0.5417 - auc: 0.5399 - f1_score: 16.4721 - loss: 0.7153 - precision: 0.5231 - recall: 0.6180\nEpoch 25: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 400ms/step - accuracy: 0.5417 - auc: 0.5401 - f1_score: 16.4769 - loss: 0.7152 - precision: 0.5234 - recall: 0.6179 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7578 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 26/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.4688 - auc: 0.4190 - f1_score: 13.4815 - loss: 0.8330 - precision: 0.3571 - recall: 0.3846\nEpoch 26: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4688 - auc: 0.4190 - f1_score: 13.4815 - loss: 0.8330 - precision: 0.3571 - recall: 0.3846 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1890 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 27/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 349ms/step - accuracy: 0.5332 - auc: 0.5442 - f1_score: 16.5439 - loss: 0.7132 - precision: 0.5147 - recall: 0.6234\nEpoch 27: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 374ms/step - accuracy: 0.5331 - auc: 0.5440 - f1_score: 16.5490 - loss: 0.7132 - precision: 0.5148 - recall: 0.6232 - val_accuracy: 0.5208 - val_auc: 0.4572 - val_f1_score: 0.0000e+00 - val_loss: 0.7613 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 28/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.5625 - auc: 0.5863 - f1_score: 15.9375 - loss: 0.6864 - precision: 0.5294 - recall: 0.6000\nEpoch 28: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5625 - auc: 0.5863 - f1_score: 15.9375 - loss: 0.6864 - precision: 0.5294 - recall: 0.6000 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.1979 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 29/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 346ms/step - accuracy: 0.5417 - auc: 0.5631 - f1_score: 16.0518 - loss: 0.7099 - precision: 0.5209 - recall: 0.5902\nEpoch 29: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 371ms/step - accuracy: 0.5416 - auc: 0.5629 - f1_score: 16.0618 - loss: 0.7099 - precision: 0.5211 - recall: 0.5904 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7651 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 30/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.5938 - auc: 0.5293 - f1_score: 17.3714 - loss: 0.7320 - precision: 0.5789 - recall: 0.6875\nEpoch 30: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - auc: 0.5293 - f1_score: 17.3714 - loss: 0.7320 - precision: 0.5789 - recall: 0.6875 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.2139 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 31/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 351ms/step - accuracy: 0.5137 - auc: 0.5232 - f1_score: 16.4784 - loss: 0.7264 - precision: 0.5098 - recall: 0.5714\nEpoch 31: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 376ms/step - accuracy: 0.5136 - auc: 0.5231 - f1_score: 16.4793 - loss: 0.7264 - precision: 0.5098 - recall: 0.5712 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7695 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 32/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m13s\u001b[0m 214ms/step - accuracy: 0.6875 - auc: 0.6943 - f1_score: 14.7333 - loss: 0.6593 - precision: 0.5882 - recall: 0.7692\nEpoch 32: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.6875 - auc: 0.6943 - f1_score: 14.7333 - loss: 0.6593 - precision: 0.5882 - recall: 0.7692 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.2325 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 33/500\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348ms/step - accuracy: 0.5128 - auc: 0.5248 - f1_score: 16.8613 - loss: 0.7168 - precision: 0.5138 - recall: 0.5976\nEpoch 33: val_loss did not improve from 0.51145\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 373ms/step - accuracy: 0.5127 - auc: 0.5248 - f1_score: 16.8578 - loss: 0.7169 - precision: 0.5137 - recall: 0.5972 - val_accuracy: 0.5208 - val_auc: 0.5000 - val_f1_score: 0.0000e+00 - val_loss: 0.7737 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 34/500\n\u001b[1m 1/62\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 210ms/step - accuracy: 0.5938 - auc: 0.6824 - f1_score: 15.4839 - loss: 0.6351 - precision: 0.5625 - recall: 0.6000\nEpoch 34: val_loss did not improve from 0.51145\n\nEpoch 34: ReduceLROnPlateau reducing learning rate to 3.999999898951501e-06.\n\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5938 - auc: 0.6824 - f1_score: 15.4839 - loss: 0.6351 - precision: 0.5625 - recall: 0.6000 - val_accuracy: 0.0000e+00 - val_auc: 0.0000e+00 - val_f1_score: 0.0000e+00 - val_loss: 1.2485 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - learning_rate: 2.0000e-05\nEpoch 34: early stopping\nRestoring model weights from the end of the best epoch: 4.\n","output_type":"stream"}],"execution_count":120},{"cell_type":"code","source":"model.evaluate(test_dataset, return_dict=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-01T18:25:48.205729Z","iopub.execute_input":"2024-11-01T18:25:48.206109Z","iopub.status.idle":"2024-11-01T18:25:49.842265Z","shell.execute_reply.started":"2024-11-01T18:25:48.206081Z","shell.execute_reply":"2024-11-01T18:25:49.841412Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 458ms/step - accuracy: 0.2823 - auc: 0.4000 - f1_score: 9.3962 - loss: 0.8025 - precision: 0.2823 - recall: 0.8000              \n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730485549.726590     152 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 0.5,\n 'auc': 0.5,\n 'f1_score': 15.871429443359375,\n 'loss': 0.7136586308479309,\n 'precision': 0.5,\n 'recall': 1.0}"},"metadata":{}}],"execution_count":121},{"cell_type":"code","source":"test_dataset = test_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'test'),\n    class_mode = 'binary',\n    target_size = (224, 224),\n    batch_size = 32,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:50.452828Z","iopub.execute_input":"2024-10-30T15:47:50.453630Z","iopub.status.idle":"2024-10-30T15:47:50.468402Z","shell.execute_reply.started":"2024-10-30T15:47:50.453603Z","shell.execute_reply":"2024-10-30T15:47:50.467542Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Found 122 images belonging to 2 classes.\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"from sklearn.metrics import (accuracy_score, precision_score, recall_score, f1_score,\n                             roc_curve, auc, precision_recall_curve, average_precision_score,\n                             confusion_matrix, ConfusionMatrixDisplay, matthews_corrcoef,\n                             log_loss)\nimport matplotlib.pyplot as plt\ny_pred_prob = model.predict(test_dataset)\n# Assuming y_true and y_pred_prob are your true labels and predicted probabilities\ny_pred_classes = (y_pred_prob >= 0.5).astype(int)\n\n# Accuracy\naccuracy = accuracy_score(y_true, y_pred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\n\n# Precision, Recall, F1 Score\nprecision = precision_score(y_true, y_pred_classes)\nrecall = recall_score(y_true, y_pred_classes)\nf1 = f1_score(y_true, y_pred_classes)\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\n\n# ROC Curve and ROC-AUC\nfpr, tpr, thresholds = roc_curve(y_true, y_pred_prob)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n# Precision-Recall Curve and PR-AUC\nprecision, recall, _ = precision_recall_curve(y_true, y_pred_prob)\naverage_precision = average_precision_score(y_true, y_pred_prob)\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='green', label=f'Precision-Recall curve (AP = {average_precision:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc=\"lower left\")\nplt.show()\n\n# Confusion Matrix\ncm = confusion_matrix(y_true, y_pred_classes)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Class 0', 'Class 1'])\ndisp.plot(cmap=plt.cm.Blues)\nplt.title('Confusion Matrix')\nplt.show()\nTP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nprint(f'TP: {TP}, TN: {TN}, FP: {FP}, FN: {FN}')\n\n# Matthews Correlation Coefficient (MCC)\nmcc = matthews_corrcoef(y_true, y_pred_classes)\nprint(f'Matthews Correlation Coefficient (MCC): {mcc:.4f}')\n\n# Specificity\nspecificity = TN / (TN + FP)\nprint(f'Specificity: {specificity:.4f}')\n\n# Log Loss\nlog_loss_value = log_loss(y_true, y_pred_prob)\nprint(f'Log Loss: {log_loss_value:.4f}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:50.469544Z","iopub.execute_input":"2024-10-30T15:47:50.469885Z","iopub.status.idle":"2024-10-30T15:47:52.993677Z","shell.execute_reply.started":"2024-10-30T15:47:50.469855Z","shell.execute_reply":"2024-10-30T15:47:52.991155Z"},"trusted":true},"outputs":[{"name":"stdout","text":"\u001b[1m2/4\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 109ms/step","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1730303271.294633     135 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 284ms/step\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[36], line 11\u001b[0m\n\u001b[1;32m      8\u001b[0m y_pred_classes \u001b[38;5;241m=\u001b[39m (y_pred_prob \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.5\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mint\u001b[39m)\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Accuracy\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m accuracy \u001b[38;5;241m=\u001b[39m accuracy_score(\u001b[43my_true\u001b[49m, y_pred_classes)\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAccuracy: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00maccuracy\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.4f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Precision, Recall, F1 Score\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'y_true' is not defined"],"ename":"NameError","evalue":"name 'y_true' is not defined","output_type":"error"}],"execution_count":36},{"cell_type":"code","source":"from tensorflow.keras.utils import plot_model \nplot_model(model,to_file = 'image.png')","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:52.994625Z","iopub.status.idle":"2024-10-30T15:47:52.995101Z","shell.execute_reply.started":"2024-10-30T15:47:52.994864Z","shell.execute_reply":"2024-10-30T15:47:52.994885Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Assuming `history` is the History object returned by `model.fit()`\n# Example: history = model.fit(...)\n\n# Extracting metrics from history\nhistory_dict = history.history\n\n# Plotting Accuracy\nplt.figure(figsize=(12, 5))\n\n# Plot training & validation accuracy values\nplt.subplot(1, 2, 1)\nplt.plot(history_dict['accuracy'], label='Training Accuracy')\nif 'val_accuracy' in history_dict:\n    plt.plot(history_dict['val_accuracy'], label='Validation Accuracy')\nplt.title('Model Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\n# Plot loss\nplt.subplot(1, 2, 2)\nplt.plot(history_dict['loss'], label='Training Loss')\nif 'val_loss' in history_dict:\n    plt.plot(history_dict['val_loss'], label='Validation Loss')\nplt.title('Model Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig('model_training_history.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:52.996274Z","iopub.status.idle":"2024-10-30T15:47:52.996696Z","shell.execute_reply.started":"2024-10-30T15:47:52.996481Z","shell.execute_reply":"2024-10-30T15:47:52.996500Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **V2**","metadata":{}},{"cell_type":"code","source":"for layer in base_model.layers[-5:]:\n    layer.trainable = True","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:52.997784Z","iopub.status.idle":"2024-10-30T15:47:52.998116Z","shell.execute_reply.started":"2024-10-30T15:47:52.997963Z","shell.execute_reply":"2024-10-30T15:47:52.997976Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:52.999707Z","iopub.status.idle":"2024-10-30T15:47:53.000041Z","shell.execute_reply.started":"2024-10-30T15:47:52.999883Z","shell.execute_reply":"2024-10-30T15:47:52.999897Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr, epoch_display],\n                    epochs=500,\n                    verbose=0\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.001104Z","iopub.status.idle":"2024-10-30T15:47:53.001428Z","shell.execute_reply.started":"2024-10-30T15:47:53.001269Z","shell.execute_reply":"2024-10-30T15:47:53.001283Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import (accuracy_score, precision_score, recall_score, f1_score,\n                             roc_curve, auc, precision_recall_curve, average_precision_score,\n                             confusion_matrix, ConfusionMatrixDisplay, matthews_corrcoef,\n                             log_loss)\nimport matplotlib.pyplot as plt\ny_pred_prob = model.predict(test_dataset)\n# Assuming y_true and y_pred_prob are your true labels and predicted probabilities\ny_pred_classes = (y_pred_prob >= 0.5).astype(int)\n\n# Accuracy\naccuracy = accuracy_score(y_true, y_pred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\n\n# Precision, Recall, F1 Score\nprecision = precision_score(y_true, y_pred_classes)\nrecall = recall_score(y_true, y_pred_classes)\nf1 = f1_score(y_true, y_pred_classes)\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\n\n# ROC Curve and ROC-AUC\nfpr, tpr, thresholds = roc_curve(y_true, y_pred_prob)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n# Precision-Recall Curve and PR-AUC\nprecision, recall, _ = precision_recall_curve(y_true, y_pred_prob)\naverage_precision = average_precision_score(y_true, y_pred_prob)\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='green', label=f'Precision-Recall curve (AP = {average_precision:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc=\"lower left\")\nplt.show()\n\n# Confusion Matrix\ncm = confusion_matrix(y_true, y_pred_classes)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Class 0', 'Class 1'])\ndisp.plot(cmap=plt.cm.Blues)\nplt.title('Confusion Matrix')\nplt.show()\nTP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nprint(f'TP: {TP}, TN: {TN}, FP: {FP}, FN: {FN}')\n\n# Matthews Correlation Coefficient (MCC)\nmcc = matthews_corrcoef(y_true, y_pred_classes)\nprint(f'Matthews Correlation Coefficient (MCC): {mcc:.4f}')\n\n# Specificity\nspecificity = TN / (TN + FP)\nprint(f'Specificity: {specificity:.4f}')\n\n# Log Loss\nlog_loss_value = log_loss(y_true, y_pred_prob)\nprint(f'Log Loss: {log_loss_value:.4f}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.003189Z","iopub.status.idle":"2024-10-30T15:47:53.003490Z","shell.execute_reply.started":"2024-10-30T15:47:53.003339Z","shell.execute_reply":"2024-10-30T15:47:53.003352Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=0)\nmodel_checkpoint = ModelCheckpoint('best_model_(VGG16).keras', save_best_only=True, monitor='val_loss',verbose=0)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=1e-8, verbose=0)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.004748Z","iopub.status.idle":"2024-10-30T15:47:53.005101Z","shell.execute_reply.started":"2024-10-30T15:47:53.004944Z","shell.execute_reply":"2024-10-30T15:47:53.004958Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for layer in base_model.layers[-10:]:\n    layer.trainable = True","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.006460Z","iopub.status.idle":"2024-10-30T15:47:53.006754Z","shell.execute_reply.started":"2024-10-30T15:47:53.006607Z","shell.execute_reply":"2024-10-30T15:47:53.006620Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.008785Z","iopub.status.idle":"2024-10-30T15:47:53.009245Z","shell.execute_reply.started":"2024-10-30T15:47:53.009009Z","shell.execute_reply":"2024-10-30T15:47:53.009027Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // BATCH_SIZE,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // BATCH_SIZE,\n                    callbacks=[early_stopping, model_checkpoint, reduce_lr, epoch_display],\n                    epochs=500,\n                    verbose=0\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.010318Z","iopub.status.idle":"2024-10-30T15:47:53.010737Z","shell.execute_reply.started":"2024-10-30T15:47:53.010518Z","shell.execute_reply":"2024-10-30T15:47:53.010536Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import (accuracy_score, precision_score, recall_score, f1_score,\n                             roc_curve, auc, precision_recall_curve, average_precision_score,\n                             confusion_matrix, ConfusionMatrixDisplay, matthews_corrcoef,\n                             log_loss)\nimport matplotlib.pyplot as plt\ny_pred_prob = model.predict(test_dataset)\n# Assuming y_true and y_pred_prob are your true labels and predicted probabilities\ny_pred_classes = (y_pred_prob >= 0.5).astype(int)\n\n# Accuracy\naccuracy = accuracy_score(y_true, y_pred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\n\n# Precision, Recall, F1 Score\nprecision = precision_score(y_true, y_pred_classes)\nrecall = recall_score(y_true, y_pred_classes)\nf1 = f1_score(y_true, y_pred_classes)\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\n\n# ROC Curve and ROC-AUC\nfpr, tpr, thresholds = roc_curve(y_true, y_pred_prob)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n# Precision-Recall Curve and PR-AUC\nprecision, recall, _ = precision_recall_curve(y_true, y_pred_prob)\naverage_precision = average_precision_score(y_true, y_pred_prob)\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='green', label=f'Precision-Recall curve (AP = {average_precision:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc=\"lower left\")\nplt.show()\n\n# Confusion Matrix\ncm = confusion_matrix(y_true, y_pred_classes)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Class 0', 'Class 1'])\ndisp.plot(cmap=plt.cm.Blues)\nplt.title('Confusion Matrix')\nplt.show()\nTP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nprint(f'TP: {TP}, TN: {TN}, FP: {FP}, FN: {FN}')\n\n# Matthews Correlation Coefficient (MCC)\nmcc = matthews_corrcoef(y_true, y_pred_classes)\nprint(f'Matthews Correlation Coefficient (MCC): {mcc:.4f}')\n\n# Specificity\nspecificity = TN / (TN + FP)\nprint(f'Specificity: {specificity:.4f}')\n\n# Log Loss\nlog_loss_value = log_loss(y_true, y_pred_prob)\nprint(f'Log Loss: {log_loss_value:.4f}')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.011881Z","iopub.status.idle":"2024-10-30T15:47:53.012309Z","shell.execute_reply.started":"2024-10-30T15:47:53.012081Z","shell.execute_reply":"2024-10-30T15:47:53.012099Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Xception**","metadata":{}},{"cell_type":"code","source":"# Load the Xception model pre-trained on ImageNet, excluding the top layers\nbase_model_xception = Xception(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Add custom layers on top of the base model\nx = base_model_xception.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)  # Adjust the number of classes as needed\n\n# Create the final model\nmodel_xception = Model(inputs=base_model_xception.input, outputs=predictions)\n\n# Freeze the layers of the base model\nfor layer in base_model_xception.layers:\n    layer.trainable = False\n\n# Compile the model with sparse_categorical_crossentropy\nmodel_xception.compile(optimizer=Adam(learning_rate=0.0001), \n              loss='binary_crossentropy', \n              metrics=['accuracy', tf.keras.metrics.AUC(name='auc')])","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.013556Z","iopub.status.idle":"2024-10-30T15:47:53.014012Z","shell.execute_reply.started":"2024-10-30T15:47:53.013757Z","shell.execute_reply":"2024-10-30T15:47:53.013775Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Callbacks\nearly_stopping_x = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=1)\nmodel_checkpoint_x = ModelCheckpoint('best_model_(Xception).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr_x = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=0.0000001, verbose=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.015487Z","iopub.status.idle":"2024-10-30T15:47:53.015922Z","shell.execute_reply.started":"2024-10-30T15:47:53.015693Z","shell.execute_reply":"2024-10-30T15:47:53.015712Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train the model\nhistory_xception = model_xception.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // 32,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // 32,\n                    callbacks=[early_stopping_x, model_checkpoint_x, reduce_lr_x],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.016816Z","iopub.status.idle":"2024-10-30T15:47:53.017141Z","shell.execute_reply.started":"2024-10-30T15:47:53.016976Z","shell.execute_reply":"2024-10-30T15:47:53.016990Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_xception.evaluate(test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.018859Z","iopub.status.idle":"2024-10-30T15:47:53.019285Z","shell.execute_reply.started":"2024-10-30T15:47:53.019062Z","shell.execute_reply":"2024-10-30T15:47:53.019080Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **ResNet50**","metadata":{}},{"cell_type":"code","source":"TARGET_SIZE = (150, 150)\n\nval_gen = ImageDataGenerator(rescale=1./255)\ntest_gen = ImageDataGenerator(rescale=1./255)\ntrain_gen = ImageDataGenerator(rescale=1./255)\n\ntrain_dataset = train_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'train'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32\n)\ntest_dataset = test_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'test'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32,\n    shuffle=False\n)\nval_dataset = val_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'val'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.020813Z","iopub.status.idle":"2024-10-30T15:47:53.021139Z","shell.execute_reply.started":"2024-10-30T15:47:53.020975Z","shell.execute_reply":"2024-10-30T15:47:53.020989Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.applications import VGG19, RestNet50\n\n# Load the VGG19 model pre-trained on ImageNet, excluding the top layers\nbase_model_vgg19 = VGG19(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Add custom layers on top of the base model\nx = base_model_vgg19.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)  # Adjust the number of classes as needed\n\n# Create the final model\nmodel_vgg19 = Model(inputs=base_model_vgg19.input, outputs=predictions)\n\n# Freeze the layers of the base model\nfor layer in base_model_vgg19.layers:\n    layer.trainable = False\n\n# Compile the model with sparse_categorical_crossentropy\nmodel_vgg19.compile(optimizer=Adam(learning_rate=0.0001), \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\n\n\n# Callbacks\nearly_stopping_vgg19 = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=0)\nmodel_checkpoint_vgg19 = ModelCheckpoint('best_model_(VGG19).keras', save_best_only=True, monitor='val_loss',verbose=0)\nreduce_lr_vgg19 = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=0.0000001, verbose=0)\n\n# Train the model\nhistory_vgg19 = model_vgg19.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // 32,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // 32,\n                    callbacks=[early_stopping_vgg19, model_checkpoint_vgg19, reduce_lr_vgg19],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.022397Z","iopub.status.idle":"2024-10-30T15:47:53.022697Z","shell.execute_reply.started":"2024-10-30T15:47:53.022547Z","shell.execute_reply":"2024-10-30T15:47:53.022560Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.applications import VGG19, ResNet50\n\n# Load the VGG19 model pre-trained on ImageNet, excluding the top layers\nbase_model_vgg19 = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Add custom layers on top of the base model\nx = base_model_vgg19.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)  # Adjust the number of classes as needed\n\n# Create the final model\nmodel_vgg19 = Model(inputs=base_model_vgg19.input, outputs=predictions)\n\n# Freeze the layers of the base model\nfor layer in base_model_vgg19.layers:\n    layer.trainable = False\n\n# Compile the model with sparse_categorical_crossentropy\nmodel_vgg19.compile(optimizer=Adam(learning_rate=0.0001), \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\n\n\n# Callbacks\nearly_stopping_vgg19 = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=0)\nmodel_checkpoint_vgg19 = ModelCheckpoint('best_model_(VGG19).keras', save_best_only=True, monitor='val_loss',verbose=0)\nreduce_lr_vgg19 = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=0.0000001, verbose=0)\n\n# Train the model\nhistory_vgg19 = model_vgg19.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // 32,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // 32,\n                    callbacks=[early_stopping_vgg19, model_checkpoint_vgg19, reduce_lr_vgg19],\n                    epochs=500,\n                    verbose=1\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.023894Z","iopub.status.idle":"2024-10-30T15:47:53.024222Z","shell.execute_reply.started":"2024-10-30T15:47:53.024056Z","shell.execute_reply":"2024-10-30T15:47:53.024070Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_vgg19.evaluate(test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.025758Z","iopub.status.idle":"2024-10-30T15:47:53.026205Z","shell.execute_reply.started":"2024-10-30T15:47:53.025982Z","shell.execute_reply":"2024-10-30T15:47:53.026001Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Plot training & validation accuracy values\nplt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\n\n# Plot training & validation loss values\nplt.subplot(1, 2, 2)\nplt.plot(history.history['auc'])\nplt.plot(history.history['accuracy'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['auc', 'accuracy'], loc='upper left')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.027634Z","iopub.status.idle":"2024-10-30T15:47:53.027983Z","shell.execute_reply.started":"2024-10-30T15:47:53.027815Z","shell.execute_reply":"2024-10-30T15:47:53.027833Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n\n# Define the VGG16-like model\nnew_model = Sequential()\n\n# Block 1\nnew_model.add(Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(224, 224, 3)))\nnew_model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nnew_model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 2\nnew_model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nnew_model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 3\nnew_model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nnew_model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 4\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 5\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nnew_model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Fully connected layers (Classifier part)\nnew_model.add(Flatten())\nnew_model.add(Dense(4096, activation='relu'))\nnew_model.add(Dropout(0.5))\nnew_model.add(Dense(4096, activation='relu'))\nnew_model.add(Dropout(0.5))\nnew_model.add(Dense(1, activation='sigmoid'))  \n\n# Compile the model\nnew_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Print the model summary\nnew_model.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.028908Z","iopub.status.idle":"2024-10-30T15:47:53.029235Z","shell.execute_reply.started":"2024-10-30T15:47:53.029066Z","shell.execute_reply":"2024-10-30T15:47:53.029079Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"TARGET_SIZE = (224, 224)\n\nval_gen = ImageDataGenerator(rescale=1./255)\ntest_gen = ImageDataGenerator(rescale=1./255)\ntrain_gen = ImageDataGenerator(rescale=1./255)\n\ntrain_dataset = train_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'train'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32\n)\ntest_dataset = test_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'test'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32,\n    shuffle=False\n)\nval_dataset = val_gen.flow_from_directory(\n    directory=os.path.join(work_root, 'val'),\n    class_mode = 'binary',\n    target_size = TARGET_SIZE,\n    batch_size = 32,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.030499Z","iopub.status.idle":"2024-10-30T15:47:53.030814Z","shell.execute_reply.started":"2024-10-30T15:47:53.030644Z","shell.execute_reply":"2024-10-30T15:47:53.030656Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Callbacks\nearly_stopping_new = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True,verbose=1)\nmodel_checkpoint_new = ModelCheckpoint('best_model_(new).keras', save_best_only=True, monitor='val_loss',verbose=1)\nreduce_lr_new = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=25, min_lr=0.001, verbose=1)\n\n# Train the model\nhistory_new = new_model.fit(train_dataset,\n                    steps_per_epoch=  train_dataset.samples // 32,\n                    validation_data=val_dataset,\n                    validation_steps=val_dataset.samples // 32,\n                    callbacks=[early_stopping_new, model_checkpoint_new, reduce_lr_new],\n                    epochs=500,\n                    verbose=0\n                   )  ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.032630Z","iopub.status.idle":"2024-10-30T15:47:53.033078Z","shell.execute_reply.started":"2024-10-30T15:47:53.032855Z","shell.execute_reply":"2024-10-30T15:47:53.032873Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"new_model.evaluate(test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T15:47:53.034202Z","iopub.status.idle":"2024-10-30T15:47:53.034523Z","shell.execute_reply.started":"2024-10-30T15:47:53.034362Z","shell.execute_reply":"2024-10-30T15:47:53.034378Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}